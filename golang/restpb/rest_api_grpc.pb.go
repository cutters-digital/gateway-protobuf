// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/rest/rest_api.proto

package restpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestAPIClient is the client API for RestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestAPIClient interface {
	// Send a notification to a specific user.
	Notification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
	// Send customer-notification and update a service.
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error)
	// Send a voucher-notification to a specific user.
	VoucherNotification(ctx context.Context, in *VoucherNotificationRequest, opts ...grpc.CallOption) (*VoucherNotificationResponse, error)
}

type restAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRestAPIClient(cc grpc.ClientConnInterface) RestAPIClient {
	return &restAPIClient{cc}
}

func (c *restAPIClient) Notification(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/rest.RestAPI/Notification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restAPIClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*UpdateServiceResponse, error) {
	out := new(UpdateServiceResponse)
	err := c.cc.Invoke(ctx, "/rest.RestAPI/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restAPIClient) VoucherNotification(ctx context.Context, in *VoucherNotificationRequest, opts ...grpc.CallOption) (*VoucherNotificationResponse, error) {
	out := new(VoucherNotificationResponse)
	err := c.cc.Invoke(ctx, "/rest.RestAPI/VoucherNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestAPIServer is the server API for RestAPI service.
// All implementations must embed UnimplementedRestAPIServer
// for forward compatibility
type RestAPIServer interface {
	// Send a notification to a specific user.
	Notification(context.Context, *NotificationRequest) (*NotificationResponse, error)
	// Send customer-notification and update a service.
	UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error)
	// Send a voucher-notification to a specific user.
	VoucherNotification(context.Context, *VoucherNotificationRequest) (*VoucherNotificationResponse, error)
	mustEmbedUnimplementedRestAPIServer()
}

// UnimplementedRestAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRestAPIServer struct {
}

func (UnimplementedRestAPIServer) Notification(context.Context, *NotificationRequest) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notification not implemented")
}
func (UnimplementedRestAPIServer) UpdateService(context.Context, *UpdateServiceRequest) (*UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedRestAPIServer) VoucherNotification(context.Context, *VoucherNotificationRequest) (*VoucherNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoucherNotification not implemented")
}
func (UnimplementedRestAPIServer) mustEmbedUnimplementedRestAPIServer() {}

// UnsafeRestAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestAPIServer will
// result in compilation errors.
type UnsafeRestAPIServer interface {
	mustEmbedUnimplementedRestAPIServer()
}

func RegisterRestAPIServer(s grpc.ServiceRegistrar, srv RestAPIServer) {
	s.RegisterService(&RestAPI_ServiceDesc, srv)
}

func _RestAPI_Notification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestAPIServer).Notification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestAPI/Notification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestAPIServer).Notification(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestAPI_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestAPIServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestAPI/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestAPIServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestAPI_VoucherNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoucherNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestAPIServer).VoucherNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestAPI/VoucherNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestAPIServer).VoucherNotification(ctx, req.(*VoucherNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestAPI_ServiceDesc is the grpc.ServiceDesc for RestAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.RestAPI",
	HandlerType: (*RestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notification",
			Handler:    _RestAPI_Notification_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _RestAPI_UpdateService_Handler,
		},
		{
			MethodName: "VoucherNotification",
			Handler:    _RestAPI_VoucherNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rest/rest_api.proto",
}
