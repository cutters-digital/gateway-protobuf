// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/server/cutters_api.proto

package serverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CuttersAPIClient is the client API for CuttersAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CuttersAPIClient interface {
	// Returns all the salons with estimated waiting times.
	GetWaitingTimes(ctx context.Context, in *GetWaitingTimesRequest, opts ...grpc.CallOption) (CuttersAPI_GetWaitingTimesClient, error)
	// Returns a salon with updated waiting-times.
	GetSalon(ctx context.Context, in *GetSalonRequest, opts ...grpc.CallOption) (*GetSalonResponse, error)
	// Deprecated: Do not use.
	// Book a haircut.
	Book(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	// Purchase a certain number of haircuts and/or products.
	Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*PurchaseResponse, error)
	// Get the payment-providers that are available to the app for the given user.
	GetAvailablePaymentProviders(ctx context.Context, in *GetAvailablePaymentProvidersRequest, opts ...grpc.CallOption) (*GetAvailablePaymentProvidersResponse, error)
	// Get the total price for the requested items.
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	// Get all active campaigns/sales.
	GetCampaigns(ctx context.Context, in *GetCampaignsRequest, opts ...grpc.CallOption) (*GetCampaignsResponse, error)
	// Get all the services available for a salon. The best-matching locale will be used.
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (CuttersAPI_GetServicesClient, error)
	// Get all the products available for a salon. The best-matching locale will be used.
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (CuttersAPI_GetProductsClient, error)
	// Get the current waiting-status.
	GetWaitingStatus(ctx context.Context, in *GetWaitingStatusRequest, opts ...grpc.CallOption) (*GetWaitingStatusResponse, error)
	// Deprecated: Do not use.
	// List all current and historic purchases. Replaced by ListActiveTransactions and ListHistoricalTransactions.
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// Checks if a voucher can be redeemed.
	CanRedeemVoucher(ctx context.Context, in *CanRedeemVoucherRequest, opts ...grpc.CallOption) (*CanRedeemVoucherResponse, error)
	// Create a sharable voucher.
	CreateVoucher(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*CreateVoucherResponse, error)
	// Get Voucher referral-status.
	GetReferralStatus(ctx context.Context, in *GetReferralStatusRequest, opts ...grpc.CallOption) (*GetReferralStatusResponse, error)
	// Cancel a upcoming service.
	CancelService(ctx context.Context, in *CancelServiceRequest, opts ...grpc.CallOption) (*CancelServiceResponse, error)
	// Log a remote event.
	RemoteLog(ctx context.Context, in *RemoteLogRequest, opts ...grpc.CallOption) (*RemoteLogResponse, error)
	// Force a timeout.
	Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error)
	// List active transactions (booked haircuts and products to pickup).
	ListActiveTransactions(ctx context.Context, in *ListActiveTransactionsRequest, opts ...grpc.CallOption) (*ListActiveTransactionsResponse, error)
	// List historical transactions (performed haircuts and picked up products).
	ListHistoricalTransactions(ctx context.Context, in *ListHistoricalTransactionsRequest, opts ...grpc.CallOption) (*ListHistoricalTransactionsResponse, error)
	// Get all punched-in hairdressers for a given salon.
	GetAvailableHairdressers(ctx context.Context, in *AvailableHairdressersRequest, opts ...grpc.CallOption) (*AvailableHairdressersResponse, error)
}

type cuttersAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCuttersAPIClient(cc grpc.ClientConnInterface) CuttersAPIClient {
	return &cuttersAPIClient{cc}
}

func (c *cuttersAPIClient) GetWaitingTimes(ctx context.Context, in *GetWaitingTimesRequest, opts ...grpc.CallOption) (CuttersAPI_GetWaitingTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CuttersAPI_ServiceDesc.Streams[0], "/server.CuttersAPI/GetWaitingTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &cuttersAPIGetWaitingTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CuttersAPI_GetWaitingTimesClient interface {
	Recv() (*GetWaitingTimesResponse, error)
	grpc.ClientStream
}

type cuttersAPIGetWaitingTimesClient struct {
	grpc.ClientStream
}

func (x *cuttersAPIGetWaitingTimesClient) Recv() (*GetWaitingTimesResponse, error) {
	m := new(GetWaitingTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cuttersAPIClient) GetSalon(ctx context.Context, in *GetSalonRequest, opts ...grpc.CallOption) (*GetSalonResponse, error) {
	out := new(GetSalonResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/GetSalon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *cuttersAPIClient) Book(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/Book", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) GetAvailablePaymentProviders(ctx context.Context, in *GetAvailablePaymentProvidersRequest, opts ...grpc.CallOption) (*GetAvailablePaymentProvidersResponse, error) {
	out := new(GetAvailablePaymentProvidersResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/GetAvailablePaymentProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) GetCampaigns(ctx context.Context, in *GetCampaignsRequest, opts ...grpc.CallOption) (*GetCampaignsResponse, error) {
	out := new(GetCampaignsResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/GetCampaigns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (CuttersAPI_GetServicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CuttersAPI_ServiceDesc.Streams[1], "/server.CuttersAPI/GetServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &cuttersAPIGetServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CuttersAPI_GetServicesClient interface {
	Recv() (*GetServicesResponse, error)
	grpc.ClientStream
}

type cuttersAPIGetServicesClient struct {
	grpc.ClientStream
}

func (x *cuttersAPIGetServicesClient) Recv() (*GetServicesResponse, error) {
	m := new(GetServicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cuttersAPIClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (CuttersAPI_GetProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CuttersAPI_ServiceDesc.Streams[2], "/server.CuttersAPI/GetProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &cuttersAPIGetProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CuttersAPI_GetProductsClient interface {
	Recv() (*GetProductsResponse, error)
	grpc.ClientStream
}

type cuttersAPIGetProductsClient struct {
	grpc.ClientStream
}

func (x *cuttersAPIGetProductsClient) Recv() (*GetProductsResponse, error) {
	m := new(GetProductsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cuttersAPIClient) GetWaitingStatus(ctx context.Context, in *GetWaitingStatusRequest, opts ...grpc.CallOption) (*GetWaitingStatusResponse, error) {
	out := new(GetWaitingStatusResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/GetWaitingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *cuttersAPIClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) CanRedeemVoucher(ctx context.Context, in *CanRedeemVoucherRequest, opts ...grpc.CallOption) (*CanRedeemVoucherResponse, error) {
	out := new(CanRedeemVoucherResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/CanRedeemVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) CreateVoucher(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*CreateVoucherResponse, error) {
	out := new(CreateVoucherResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/CreateVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) GetReferralStatus(ctx context.Context, in *GetReferralStatusRequest, opts ...grpc.CallOption) (*GetReferralStatusResponse, error) {
	out := new(GetReferralStatusResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/GetReferralStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) CancelService(ctx context.Context, in *CancelServiceRequest, opts ...grpc.CallOption) (*CancelServiceResponse, error) {
	out := new(CancelServiceResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/CancelService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) RemoteLog(ctx context.Context, in *RemoteLogRequest, opts ...grpc.CallOption) (*RemoteLogResponse, error) {
	out := new(RemoteLogResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/RemoteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error) {
	out := new(TimeoutResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/Timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) ListActiveTransactions(ctx context.Context, in *ListActiveTransactionsRequest, opts ...grpc.CallOption) (*ListActiveTransactionsResponse, error) {
	out := new(ListActiveTransactionsResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/ListActiveTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) ListHistoricalTransactions(ctx context.Context, in *ListHistoricalTransactionsRequest, opts ...grpc.CallOption) (*ListHistoricalTransactionsResponse, error) {
	out := new(ListHistoricalTransactionsResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/ListHistoricalTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuttersAPIClient) GetAvailableHairdressers(ctx context.Context, in *AvailableHairdressersRequest, opts ...grpc.CallOption) (*AvailableHairdressersResponse, error) {
	out := new(AvailableHairdressersResponse)
	err := c.cc.Invoke(ctx, "/server.CuttersAPI/GetAvailableHairdressers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CuttersAPIServer is the server API for CuttersAPI service.
// All implementations must embed UnimplementedCuttersAPIServer
// for forward compatibility
type CuttersAPIServer interface {
	// Returns all the salons with estimated waiting times.
	GetWaitingTimes(*GetWaitingTimesRequest, CuttersAPI_GetWaitingTimesServer) error
	// Returns a salon with updated waiting-times.
	GetSalon(context.Context, *GetSalonRequest) (*GetSalonResponse, error)
	// Deprecated: Do not use.
	// Book a haircut.
	Book(context.Context, *BookRequest) (*BookResponse, error)
	// Purchase a certain number of haircuts and/or products.
	Purchase(context.Context, *PurchaseRequest) (*PurchaseResponse, error)
	// Get the payment-providers that are available to the app for the given user.
	GetAvailablePaymentProviders(context.Context, *GetAvailablePaymentProvidersRequest) (*GetAvailablePaymentProvidersResponse, error)
	// Get the total price for the requested items.
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	// Get all active campaigns/sales.
	GetCampaigns(context.Context, *GetCampaignsRequest) (*GetCampaignsResponse, error)
	// Get all the services available for a salon. The best-matching locale will be used.
	GetServices(*GetServicesRequest, CuttersAPI_GetServicesServer) error
	// Get all the products available for a salon. The best-matching locale will be used.
	GetProducts(*GetProductsRequest, CuttersAPI_GetProductsServer) error
	// Get the current waiting-status.
	GetWaitingStatus(context.Context, *GetWaitingStatusRequest) (*GetWaitingStatusResponse, error)
	// Deprecated: Do not use.
	// List all current and historic purchases. Replaced by ListActiveTransactions and ListHistoricalTransactions.
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	// Checks if a voucher can be redeemed.
	CanRedeemVoucher(context.Context, *CanRedeemVoucherRequest) (*CanRedeemVoucherResponse, error)
	// Create a sharable voucher.
	CreateVoucher(context.Context, *CreateVoucherRequest) (*CreateVoucherResponse, error)
	// Get Voucher referral-status.
	GetReferralStatus(context.Context, *GetReferralStatusRequest) (*GetReferralStatusResponse, error)
	// Cancel a upcoming service.
	CancelService(context.Context, *CancelServiceRequest) (*CancelServiceResponse, error)
	// Log a remote event.
	RemoteLog(context.Context, *RemoteLogRequest) (*RemoteLogResponse, error)
	// Force a timeout.
	Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error)
	// List active transactions (booked haircuts and products to pickup).
	ListActiveTransactions(context.Context, *ListActiveTransactionsRequest) (*ListActiveTransactionsResponse, error)
	// List historical transactions (performed haircuts and picked up products).
	ListHistoricalTransactions(context.Context, *ListHistoricalTransactionsRequest) (*ListHistoricalTransactionsResponse, error)
	// Get all punched-in hairdressers for a given salon.
	GetAvailableHairdressers(context.Context, *AvailableHairdressersRequest) (*AvailableHairdressersResponse, error)
	mustEmbedUnimplementedCuttersAPIServer()
}

// UnimplementedCuttersAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCuttersAPIServer struct {
}

func (UnimplementedCuttersAPIServer) GetWaitingTimes(*GetWaitingTimesRequest, CuttersAPI_GetWaitingTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWaitingTimes not implemented")
}
func (UnimplementedCuttersAPIServer) GetSalon(context.Context, *GetSalonRequest) (*GetSalonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalon not implemented")
}
func (UnimplementedCuttersAPIServer) Book(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Book not implemented")
}
func (UnimplementedCuttersAPIServer) Purchase(context.Context, *PurchaseRequest) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (UnimplementedCuttersAPIServer) GetAvailablePaymentProviders(context.Context, *GetAvailablePaymentProvidersRequest) (*GetAvailablePaymentProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePaymentProviders not implemented")
}
func (UnimplementedCuttersAPIServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedCuttersAPIServer) GetCampaigns(context.Context, *GetCampaignsRequest) (*GetCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaigns not implemented")
}
func (UnimplementedCuttersAPIServer) GetServices(*GetServicesRequest, CuttersAPI_GetServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedCuttersAPIServer) GetProducts(*GetProductsRequest, CuttersAPI_GetProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedCuttersAPIServer) GetWaitingStatus(context.Context, *GetWaitingStatusRequest) (*GetWaitingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaitingStatus not implemented")
}
func (UnimplementedCuttersAPIServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedCuttersAPIServer) CanRedeemVoucher(context.Context, *CanRedeemVoucherRequest) (*CanRedeemVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanRedeemVoucher not implemented")
}
func (UnimplementedCuttersAPIServer) CreateVoucher(context.Context, *CreateVoucherRequest) (*CreateVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoucher not implemented")
}
func (UnimplementedCuttersAPIServer) GetReferralStatus(context.Context, *GetReferralStatusRequest) (*GetReferralStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralStatus not implemented")
}
func (UnimplementedCuttersAPIServer) CancelService(context.Context, *CancelServiceRequest) (*CancelServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelService not implemented")
}
func (UnimplementedCuttersAPIServer) RemoteLog(context.Context, *RemoteLogRequest) (*RemoteLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteLog not implemented")
}
func (UnimplementedCuttersAPIServer) Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeout not implemented")
}
func (UnimplementedCuttersAPIServer) ListActiveTransactions(context.Context, *ListActiveTransactionsRequest) (*ListActiveTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveTransactions not implemented")
}
func (UnimplementedCuttersAPIServer) ListHistoricalTransactions(context.Context, *ListHistoricalTransactionsRequest) (*ListHistoricalTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoricalTransactions not implemented")
}
func (UnimplementedCuttersAPIServer) GetAvailableHairdressers(context.Context, *AvailableHairdressersRequest) (*AvailableHairdressersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableHairdressers not implemented")
}
func (UnimplementedCuttersAPIServer) mustEmbedUnimplementedCuttersAPIServer() {}

// UnsafeCuttersAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CuttersAPIServer will
// result in compilation errors.
type UnsafeCuttersAPIServer interface {
	mustEmbedUnimplementedCuttersAPIServer()
}

func RegisterCuttersAPIServer(s grpc.ServiceRegistrar, srv CuttersAPIServer) {
	s.RegisterService(&CuttersAPI_ServiceDesc, srv)
}

func _CuttersAPI_GetWaitingTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWaitingTimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CuttersAPIServer).GetWaitingTimes(m, &cuttersAPIGetWaitingTimesServer{stream})
}

type CuttersAPI_GetWaitingTimesServer interface {
	Send(*GetWaitingTimesResponse) error
	grpc.ServerStream
}

type cuttersAPIGetWaitingTimesServer struct {
	grpc.ServerStream
}

func (x *cuttersAPIGetWaitingTimesServer) Send(m *GetWaitingTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CuttersAPI_GetSalon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).GetSalon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/GetSalon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).GetSalon(ctx, req.(*GetSalonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_Book_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).Book(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/Book",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).Book(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).Purchase(ctx, req.(*PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_GetAvailablePaymentProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailablePaymentProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).GetAvailablePaymentProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/GetAvailablePaymentProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).GetAvailablePaymentProviders(ctx, req.(*GetAvailablePaymentProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_GetCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).GetCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/GetCampaigns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).GetCampaigns(ctx, req.(*GetCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_GetServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CuttersAPIServer).GetServices(m, &cuttersAPIGetServicesServer{stream})
}

type CuttersAPI_GetServicesServer interface {
	Send(*GetServicesResponse) error
	grpc.ServerStream
}

type cuttersAPIGetServicesServer struct {
	grpc.ServerStream
}

func (x *cuttersAPIGetServicesServer) Send(m *GetServicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CuttersAPI_GetProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProductsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CuttersAPIServer).GetProducts(m, &cuttersAPIGetProductsServer{stream})
}

type CuttersAPI_GetProductsServer interface {
	Send(*GetProductsResponse) error
	grpc.ServerStream
}

type cuttersAPIGetProductsServer struct {
	grpc.ServerStream
}

func (x *cuttersAPIGetProductsServer) Send(m *GetProductsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CuttersAPI_GetWaitingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaitingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).GetWaitingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/GetWaitingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).GetWaitingStatus(ctx, req.(*GetWaitingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_CanRedeemVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanRedeemVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).CanRedeemVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/CanRedeemVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).CanRedeemVoucher(ctx, req.(*CanRedeemVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_CreateVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).CreateVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/CreateVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).CreateVoucher(ctx, req.(*CreateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_GetReferralStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).GetReferralStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/GetReferralStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).GetReferralStatus(ctx, req.(*GetReferralStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_CancelService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).CancelService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/CancelService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).CancelService(ctx, req.(*CancelServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_RemoteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).RemoteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/RemoteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).RemoteLog(ctx, req.(*RemoteLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).Timeout(ctx, req.(*TimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_ListActiveTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).ListActiveTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/ListActiveTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).ListActiveTransactions(ctx, req.(*ListActiveTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_ListHistoricalTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoricalTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).ListHistoricalTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/ListHistoricalTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).ListHistoricalTransactions(ctx, req.(*ListHistoricalTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuttersAPI_GetAvailableHairdressers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableHairdressersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuttersAPIServer).GetAvailableHairdressers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.CuttersAPI/GetAvailableHairdressers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuttersAPIServer).GetAvailableHairdressers(ctx, req.(*AvailableHairdressersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CuttersAPI_ServiceDesc is the grpc.ServiceDesc for CuttersAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CuttersAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.CuttersAPI",
	HandlerType: (*CuttersAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSalon",
			Handler:    _CuttersAPI_GetSalon_Handler,
		},
		{
			MethodName: "Book",
			Handler:    _CuttersAPI_Book_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _CuttersAPI_Purchase_Handler,
		},
		{
			MethodName: "GetAvailablePaymentProviders",
			Handler:    _CuttersAPI_GetAvailablePaymentProviders_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _CuttersAPI_GetPrice_Handler,
		},
		{
			MethodName: "GetCampaigns",
			Handler:    _CuttersAPI_GetCampaigns_Handler,
		},
		{
			MethodName: "GetWaitingStatus",
			Handler:    _CuttersAPI_GetWaitingStatus_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _CuttersAPI_ListTransactions_Handler,
		},
		{
			MethodName: "CanRedeemVoucher",
			Handler:    _CuttersAPI_CanRedeemVoucher_Handler,
		},
		{
			MethodName: "CreateVoucher",
			Handler:    _CuttersAPI_CreateVoucher_Handler,
		},
		{
			MethodName: "GetReferralStatus",
			Handler:    _CuttersAPI_GetReferralStatus_Handler,
		},
		{
			MethodName: "CancelService",
			Handler:    _CuttersAPI_CancelService_Handler,
		},
		{
			MethodName: "RemoteLog",
			Handler:    _CuttersAPI_RemoteLog_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _CuttersAPI_Timeout_Handler,
		},
		{
			MethodName: "ListActiveTransactions",
			Handler:    _CuttersAPI_ListActiveTransactions_Handler,
		},
		{
			MethodName: "ListHistoricalTransactions",
			Handler:    _CuttersAPI_ListHistoricalTransactions_Handler,
		},
		{
			MethodName: "GetAvailableHairdressers",
			Handler:    _CuttersAPI_GetAvailableHairdressers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWaitingTimes",
			Handler:       _CuttersAPI_GetWaitingTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetServices",
			Handler:       _CuttersAPI_GetServices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProducts",
			Handler:       _CuttersAPI_GetProducts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/server/cutters_api.proto",
}
