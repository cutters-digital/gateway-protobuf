// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: proto/server/cutters_api.proto

package serverpb

import (
	authpb "github.com/cutters-digital/gateway-protobuf/golang/authpb"
	moneypb "github.com/cutters-digital/gateway-protobuf/golang/moneypb"
	paymentspb "github.com/cutters-digital/gateway-protobuf/golang/paymentspb"
	productspb "github.com/cutters-digital/gateway-protobuf/golang/productspb"
	utilspb "github.com/cutters-digital/gateway-protobuf/golang/utilspb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HistoricalTransactionState contains valid states for historical service transactions.
type HistoricalTransactionState int32

const (
	HistoricalTransactionState_HISTORICAL_TRANSACTION_STATE_INVALID   HistoricalTransactionState = 0
	HistoricalTransactionState_HISTORICAL_TRANSACTION_STATE_COMPLETED HistoricalTransactionState = 1
	HistoricalTransactionState_HISTORICAL_TRANSACTION_STATE_CANCELLED HistoricalTransactionState = 2
	HistoricalTransactionState_HISTORICAL_TRANSACTION_STATE_NOSHOW    HistoricalTransactionState = 3
	HistoricalTransactionState_HISTORICAL_TRANSACTION_STATE_ERROR     HistoricalTransactionState = 4
)

// Enum value maps for HistoricalTransactionState.
var (
	HistoricalTransactionState_name = map[int32]string{
		0: "HISTORICAL_TRANSACTION_STATE_INVALID",
		1: "HISTORICAL_TRANSACTION_STATE_COMPLETED",
		2: "HISTORICAL_TRANSACTION_STATE_CANCELLED",
		3: "HISTORICAL_TRANSACTION_STATE_NOSHOW",
		4: "HISTORICAL_TRANSACTION_STATE_ERROR",
	}
	HistoricalTransactionState_value = map[string]int32{
		"HISTORICAL_TRANSACTION_STATE_INVALID":   0,
		"HISTORICAL_TRANSACTION_STATE_COMPLETED": 1,
		"HISTORICAL_TRANSACTION_STATE_CANCELLED": 2,
		"HISTORICAL_TRANSACTION_STATE_NOSHOW":    3,
		"HISTORICAL_TRANSACTION_STATE_ERROR":     4,
	}
)

func (x HistoricalTransactionState) Enum() *HistoricalTransactionState {
	p := new(HistoricalTransactionState)
	*p = x
	return p
}

func (x HistoricalTransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistoricalTransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_cutters_api_proto_enumTypes[0].Descriptor()
}

func (HistoricalTransactionState) Type() protoreflect.EnumType {
	return &file_proto_server_cutters_api_proto_enumTypes[0]
}

func (x HistoricalTransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoricalTransactionState.Descriptor instead.
func (HistoricalTransactionState) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{0}
}

// BookingStatus contains all the known statuses a booking can be in.
type BookingStatus int32

const (
	BookingStatus_BOOKING_STATUS_INVALID    BookingStatus = 0
	BookingStatus_BOOKING_STATUS_UNKNOWN    BookingStatus = 1
	BookingStatus_BOOKING_STATUS_REGISTERED BookingStatus = 2
	BookingStatus_BOOKING_STATUS_STARTED    BookingStatus = 3
	BookingStatus_BOOKING_STATUS_STOPPED    BookingStatus = 4
	BookingStatus_BOOKING_STATUS_SERVING    BookingStatus = 5
	BookingStatus_BOOKING_STATUS_NOSHOW     BookingStatus = 6
)

// Enum value maps for BookingStatus.
var (
	BookingStatus_name = map[int32]string{
		0: "BOOKING_STATUS_INVALID",
		1: "BOOKING_STATUS_UNKNOWN",
		2: "BOOKING_STATUS_REGISTERED",
		3: "BOOKING_STATUS_STARTED",
		4: "BOOKING_STATUS_STOPPED",
		5: "BOOKING_STATUS_SERVING",
		6: "BOOKING_STATUS_NOSHOW",
	}
	BookingStatus_value = map[string]int32{
		"BOOKING_STATUS_INVALID":    0,
		"BOOKING_STATUS_UNKNOWN":    1,
		"BOOKING_STATUS_REGISTERED": 2,
		"BOOKING_STATUS_STARTED":    3,
		"BOOKING_STATUS_STOPPED":    4,
		"BOOKING_STATUS_SERVING":    5,
		"BOOKING_STATUS_NOSHOW":     6,
	}
)

func (x BookingStatus) Enum() *BookingStatus {
	p := new(BookingStatus)
	*p = x
	return p
}

func (x BookingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_cutters_api_proto_enumTypes[1].Descriptor()
}

func (BookingStatus) Type() protoreflect.EnumType {
	return &file_proto_server_cutters_api_proto_enumTypes[1]
}

func (x BookingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingStatus.Descriptor instead.
func (BookingStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{1}
}

// ServiceStatus contains all the known statuses a service-purchase can be in.
type ServiceStatus int32

const (
	ServiceStatus_SERVICE_STATUS_INVALID ServiceStatus = 0
	// Order complete = We have received payment, and are putting the customer in queue.
	ServiceStatus_SERVICE_STATUS_ORDER_COMPLETE ServiceStatus = 2
	// Waiting = You are currently in queue, but it is a while until your cut.
	ServiceStatus_SERVICE_STATUS_WAITING ServiceStatus = 3
	// Almost ready = You are in queue, and it's about to be your turn. Time to get to the salon.
	ServiceStatus_SERVICE_STATUS_ALMOST_READY ServiceStatus = 4
	// Your turn = You are in queue, and it's your turn to be served.
	ServiceStatus_SERVICE_STATUS_YOUR_TURN ServiceStatus = 5
	// Completed = Your cut is completed, or was canceled.
	ServiceStatus_SERVICE_STATUS_COMPLETED ServiceStatus = 6
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "SERVICE_STATUS_INVALID",
		2: "SERVICE_STATUS_ORDER_COMPLETE",
		3: "SERVICE_STATUS_WAITING",
		4: "SERVICE_STATUS_ALMOST_READY",
		5: "SERVICE_STATUS_YOUR_TURN",
		6: "SERVICE_STATUS_COMPLETED",
	}
	ServiceStatus_value = map[string]int32{
		"SERVICE_STATUS_INVALID":        0,
		"SERVICE_STATUS_ORDER_COMPLETE": 2,
		"SERVICE_STATUS_WAITING":        3,
		"SERVICE_STATUS_ALMOST_READY":   4,
		"SERVICE_STATUS_YOUR_TURN":      5,
		"SERVICE_STATUS_COMPLETED":      6,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_cutters_api_proto_enumTypes[2].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_proto_server_cutters_api_proto_enumTypes[2]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{2}
}

// WaitingTimePrecision contains all the known precisions of a salon's waiting-time.
type WaitingTimePrecision int32

const (
	WaitingTimePrecision_WAITING_TIME_PRECISION_INVALID WaitingTimePrecision = 0
	// We don't know the waiting-time.
	WaitingTimePrecision_WAITING_TIME_PRECISION_UNKNOWN WaitingTimePrecision = 1
	// We know approximately what the waiting-time is.
	WaitingTimePrecision_WAITING_TIME_PRECISION_APPROXIMATE WaitingTimePrecision = 2
	// There is little to no waiting-time.
	WaitingTimePrecision_WAITING_TIME_PRECISION_NONE WaitingTimePrecision = 3
)

// Enum value maps for WaitingTimePrecision.
var (
	WaitingTimePrecision_name = map[int32]string{
		0: "WAITING_TIME_PRECISION_INVALID",
		1: "WAITING_TIME_PRECISION_UNKNOWN",
		2: "WAITING_TIME_PRECISION_APPROXIMATE",
		3: "WAITING_TIME_PRECISION_NONE",
	}
	WaitingTimePrecision_value = map[string]int32{
		"WAITING_TIME_PRECISION_INVALID":     0,
		"WAITING_TIME_PRECISION_UNKNOWN":     1,
		"WAITING_TIME_PRECISION_APPROXIMATE": 2,
		"WAITING_TIME_PRECISION_NONE":        3,
	}
)

func (x WaitingTimePrecision) Enum() *WaitingTimePrecision {
	p := new(WaitingTimePrecision)
	*p = x
	return p
}

func (x WaitingTimePrecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitingTimePrecision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_cutters_api_proto_enumTypes[3].Descriptor()
}

func (WaitingTimePrecision) Type() protoreflect.EnumType {
	return &file_proto_server_cutters_api_proto_enumTypes[3]
}

func (x WaitingTimePrecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitingTimePrecision.Descriptor instead.
func (WaitingTimePrecision) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{3}
}

type AvailableHairdressersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SalonId string                 `protobuf:"bytes,2,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
}

func (x *AvailableHairdressersRequest) Reset() {
	*x = AvailableHairdressersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableHairdressersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableHairdressersRequest) ProtoMessage() {}

func (x *AvailableHairdressersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableHairdressersRequest.ProtoReflect.Descriptor instead.
func (*AvailableHairdressersRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{0}
}

func (x *AvailableHairdressersRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AvailableHairdressersRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

type AvailableHairdressersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnonymousHairdressers int32          `protobuf:"varint,1,opt,name=anonymous_hairdressers,json=anonymousHairdressers,proto3" json:"anonymous_hairdressers,omitempty"`
	Hairdressers          []*Hairdresser `protobuf:"bytes,2,rep,name=hairdressers,proto3" json:"hairdressers,omitempty"`
}

func (x *AvailableHairdressersResponse) Reset() {
	*x = AvailableHairdressersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableHairdressersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableHairdressersResponse) ProtoMessage() {}

func (x *AvailableHairdressersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableHairdressersResponse.ProtoReflect.Descriptor instead.
func (*AvailableHairdressersResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{1}
}

func (x *AvailableHairdressersResponse) GetAnonymousHairdressers() int32 {
	if x != nil {
		return x.AnonymousHairdressers
	}
	return 0
}

func (x *AvailableHairdressersResponse) GetHairdressers() []*Hairdresser {
	if x != nil {
		return x.Hairdressers
	}
	return nil
}

// Hairdresser describes a non-anonymous, punched-in worker.
type Hairdresser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Initials    string `protobuf:"bytes,2,opt,name=initials,proto3" json:"initials,omitempty"`
}

func (x *Hairdresser) Reset() {
	*x = Hairdresser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hairdresser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hairdresser) ProtoMessage() {}

func (x *Hairdresser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hairdresser.ProtoReflect.Descriptor instead.
func (*Hairdresser) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{2}
}

func (x *Hairdresser) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Hairdresser) GetInitials() string {
	if x != nil {
		return x.Initials
	}
	return ""
}

type GetWaitingTimesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mode:
	//
	//	*GetWaitingTimesRequest_Empty
	//	*GetWaitingTimesRequest_Location
	Mode    isGetWaitingTimesRequest_Mode `protobuf_oneof:"mode"`
	Locales []string                      `protobuf:"bytes,3,rep,name=locales,proto3" json:"locales,omitempty"`
}

func (x *GetWaitingTimesRequest) Reset() {
	*x = GetWaitingTimesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWaitingTimesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWaitingTimesRequest) ProtoMessage() {}

func (x *GetWaitingTimesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWaitingTimesRequest.ProtoReflect.Descriptor instead.
func (*GetWaitingTimesRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{3}
}

func (m *GetWaitingTimesRequest) GetMode() isGetWaitingTimesRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *GetWaitingTimesRequest) GetEmpty() *utilspb.Empty {
	if x, ok := x.GetMode().(*GetWaitingTimesRequest_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *GetWaitingTimesRequest) GetLocation() *Location {
	if x, ok := x.GetMode().(*GetWaitingTimesRequest_Location); ok {
		return x.Location
	}
	return nil
}

func (x *GetWaitingTimesRequest) GetLocales() []string {
	if x != nil {
		return x.Locales
	}
	return nil
}

type isGetWaitingTimesRequest_Mode interface {
	isGetWaitingTimesRequest_Mode()
}

type GetWaitingTimesRequest_Empty struct {
	Empty *utilspb.Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type GetWaitingTimesRequest_Location struct {
	Location *Location `protobuf:"bytes,2,opt,name=location,proto3,oneof"`
}

func (*GetWaitingTimesRequest_Empty) isGetWaitingTimesRequest_Mode() {}

func (*GetWaitingTimesRequest_Location) isGetWaitingTimesRequest_Mode() {}

type GetWaitingTimesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salon *Salon `protobuf:"bytes,1,opt,name=salon,proto3" json:"salon,omitempty"`
}

func (x *GetWaitingTimesResponse) Reset() {
	*x = GetWaitingTimesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWaitingTimesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWaitingTimesResponse) ProtoMessage() {}

func (x *GetWaitingTimesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWaitingTimesResponse.ProtoReflect.Descriptor instead.
func (*GetWaitingTimesResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetWaitingTimesResponse) GetSalon() *Salon {
	if x != nil {
		return x.Salon
	}
	return nil
}

type GetSalonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalonId string   `protobuf:"bytes,1,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	Locales []string `protobuf:"bytes,2,rep,name=locales,proto3" json:"locales,omitempty"`
}

func (x *GetSalonRequest) Reset() {
	*x = GetSalonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalonRequest) ProtoMessage() {}

func (x *GetSalonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalonRequest.ProtoReflect.Descriptor instead.
func (*GetSalonRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetSalonRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *GetSalonRequest) GetLocales() []string {
	if x != nil {
		return x.Locales
	}
	return nil
}

type GetSalonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salon *Salon `protobuf:"bytes,1,opt,name=salon,proto3" json:"salon,omitempty"`
}

func (x *GetSalonResponse) Reset() {
	*x = GetSalonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalonResponse) ProtoMessage() {}

func (x *GetSalonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalonResponse.ProtoReflect.Descriptor instead.
func (*GetSalonResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetSalonResponse) GetSalon() *Salon {
	if x != nil {
		return x.Salon
	}
	return nil
}

type BookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *authpb.Authentication     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SalonId  string                     `protobuf:"bytes,2,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	Products []*productspb.Product      `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	Payment  *paymentspb.PaymentRequest `protobuf:"bytes,4,opt,name=payment,proto3" json:"payment,omitempty"`
	// Setting allow_async to true will cause the `Book` rpc to be a lot quicker, but will rather contain a `transaction_id` in the `BookingDetails` instead of a `url`. This will be deprecated, aka default `true`, in a later version.
	AllowAsync bool `protobuf:"varint,17,opt,name=allow_async,json=allowAsync,proto3" json:"allow_async,omitempty"`
}

func (x *BookRequest) Reset() {
	*x = BookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookRequest) ProtoMessage() {}

func (x *BookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookRequest.ProtoReflect.Descriptor instead.
func (*BookRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{7}
}

func (x *BookRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *BookRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *BookRequest) GetProducts() []*productspb.Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *BookRequest) GetPayment() *paymentspb.PaymentRequest {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *BookRequest) GetAllowAsync() bool {
	if x != nil {
		return x.AllowAsync
	}
	return false
}

type BookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment *paymentspb.PaymentResponse `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	Booking *BookingDetails             `protobuf:"bytes,2,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *BookResponse) Reset() {
	*x = BookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookResponse) ProtoMessage() {}

func (x *BookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookResponse.ProtoReflect.Descriptor instead.
func (*BookResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{8}
}

func (x *BookResponse) GetPayment() *paymentspb.PaymentResponse {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *BookResponse) GetBooking() *BookingDetails {
	if x != nil {
		return x.Booking
	}
	return nil
}

type PurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *authpb.Authentication       `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SalonId  string                       `protobuf:"bytes,2,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	Services []*productspb.ServiceRequest `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	Products []*productspb.ProductRequest `protobuf:"bytes,4,rep,name=products,proto3" json:"products,omitempty"`
	Payment  *paymentspb.PaymentRequest   `protobuf:"bytes,5,opt,name=payment,proto3" json:"payment,omitempty"`
	// If aware_of_campaigns is set, then the gateway will apply campaigns when calculating the price.
	AwareOfCampaigns bool   `protobuf:"varint,6,opt,name=aware_of_campaigns,json=awareOfCampaigns,proto3" json:"aware_of_campaigns,omitempty"`
	IdempotencyKey   string `protobuf:"bytes,7,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
}

func (x *PurchaseRequest) Reset() {
	*x = PurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseRequest) ProtoMessage() {}

func (x *PurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseRequest.ProtoReflect.Descriptor instead.
func (*PurchaseRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{9}
}

func (x *PurchaseRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *PurchaseRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *PurchaseRequest) GetServices() []*productspb.ServiceRequest {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *PurchaseRequest) GetProducts() []*productspb.ProductRequest {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *PurchaseRequest) GetPayment() *paymentspb.PaymentRequest {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *PurchaseRequest) GetAwareOfCampaigns() bool {
	if x != nil {
		return x.AwareOfCampaigns
	}
	return false
}

func (x *PurchaseRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

type PurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment        *paymentspb.PaymentResponse `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	Bookings       []*BookingDetails           `protobuf:"bytes,2,rep,name=bookings,proto3" json:"bookings,omitempty"`
	IdempotencyKey string                      `protobuf:"bytes,3,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
}

func (x *PurchaseResponse) Reset() {
	*x = PurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseResponse) ProtoMessage() {}

func (x *PurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseResponse.ProtoReflect.Descriptor instead.
func (*PurchaseResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{10}
}

func (x *PurchaseResponse) GetPayment() *paymentspb.PaymentResponse {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *PurchaseResponse) GetBookings() []*BookingDetails {
	if x != nil {
		return x.Bookings
	}
	return nil
}

func (x *PurchaseResponse) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

type GetAvailablePaymentProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetAvailablePaymentProvidersRequest) Reset() {
	*x = GetAvailablePaymentProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailablePaymentProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailablePaymentProvidersRequest) ProtoMessage() {}

func (x *GetAvailablePaymentProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailablePaymentProvidersRequest.ProtoReflect.Descriptor instead.
func (*GetAvailablePaymentProvidersRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetAvailablePaymentProvidersRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetAvailablePaymentProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currently available payment solutions for this user.
	Providers *AvailablePaymentProviders `protobuf:"bytes,1,opt,name=providers,proto3" json:"providers,omitempty"`
}

func (x *GetAvailablePaymentProvidersResponse) Reset() {
	*x = GetAvailablePaymentProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailablePaymentProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailablePaymentProvidersResponse) ProtoMessage() {}

func (x *GetAvailablePaymentProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailablePaymentProvidersResponse.ProtoReflect.Descriptor instead.
func (*GetAvailablePaymentProvidersResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetAvailablePaymentProvidersResponse) GetProviders() *AvailablePaymentProviders {
	if x != nil {
		return x.Providers
	}
	return nil
}

type GetPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth     *authpb.Authentication       `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SalonId  string                       `protobuf:"bytes,2,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	Services []*productspb.ServiceRequest `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	Products []*productspb.ProductRequest `protobuf:"bytes,4,rep,name=products,proto3" json:"products,omitempty"`
	Voucher  *paymentspb.VoucherRequest   `protobuf:"bytes,5,opt,name=voucher,proto3" json:"voucher,omitempty"`
	Vouchers []*paymentspb.VoucherRequest `protobuf:"bytes,6,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
	Coupons  []*paymentspb.CouponCode     `protobuf:"bytes,7,rep,name=coupons,proto3" json:"coupons,omitempty"`
}

func (x *GetPriceRequest) Reset() {
	*x = GetPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceRequest) ProtoMessage() {}

func (x *GetPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceRequest.ProtoReflect.Descriptor instead.
func (*GetPriceRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetPriceRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GetPriceRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *GetPriceRequest) GetServices() []*productspb.ServiceRequest {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *GetPriceRequest) GetProducts() []*productspb.ProductRequest {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *GetPriceRequest) GetVoucher() *paymentspb.VoucherRequest {
	if x != nil {
		return x.Voucher
	}
	return nil
}

func (x *GetPriceRequest) GetVouchers() []*paymentspb.VoucherRequest {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

func (x *GetPriceRequest) GetCoupons() []*paymentspb.CouponCode {
	if x != nil {
		return x.Coupons
	}
	return nil
}

type GetPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    *moneypb.Price            `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Coupons  []*paymentspb.CouponCode  `protobuf:"bytes,2,rep,name=coupons,proto3" json:"coupons,omitempty"`
	Vouchers []*paymentspb.VoucherCode `protobuf:"bytes,3,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
}

func (x *GetPriceResponse) Reset() {
	*x = GetPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceResponse) ProtoMessage() {}

func (x *GetPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceResponse.ProtoReflect.Descriptor instead.
func (*GetPriceResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetPriceResponse) GetPrice() *moneypb.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *GetPriceResponse) GetCoupons() []*paymentspb.CouponCode {
	if x != nil {
		return x.Coupons
	}
	return nil
}

func (x *GetPriceResponse) GetVouchers() []*paymentspb.VoucherCode {
	if x != nil {
		return x.Vouchers
	}
	return nil
}

type GetCampaignsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	SalonId string                 `protobuf:"bytes,2,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
}

func (x *GetCampaignsRequest) Reset() {
	*x = GetCampaignsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCampaignsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCampaignsRequest) ProtoMessage() {}

func (x *GetCampaignsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCampaignsRequest.ProtoReflect.Descriptor instead.
func (*GetCampaignsRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetCampaignsRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GetCampaignsRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

type GetCampaignsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// active_campaign will be true if there is an active campaign matching the request.
	ActiveCampaign bool   `protobuf:"varint,1,opt,name=active_campaign,json=activeCampaign,proto3" json:"active_campaign,omitempty"`
	CampaignText   string `protobuf:"bytes,2,opt,name=campaign_text,json=campaignText,proto3" json:"campaign_text,omitempty"`
	// The dialog title/message should be shown if they are both non-empty.
	CampaignDialogTitle   string `protobuf:"bytes,3,opt,name=campaign_dialog_title,json=campaignDialogTitle,proto3" json:"campaign_dialog_title,omitempty"`
	CampaignDialogMessage string `protobuf:"bytes,4,opt,name=campaign_dialog_message,json=campaignDialogMessage,proto3" json:"campaign_dialog_message,omitempty"`
}

func (x *GetCampaignsResponse) Reset() {
	*x = GetCampaignsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCampaignsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCampaignsResponse) ProtoMessage() {}

func (x *GetCampaignsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCampaignsResponse.ProtoReflect.Descriptor instead.
func (*GetCampaignsResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetCampaignsResponse) GetActiveCampaign() bool {
	if x != nil {
		return x.ActiveCampaign
	}
	return false
}

func (x *GetCampaignsResponse) GetCampaignText() string {
	if x != nil {
		return x.CampaignText
	}
	return ""
}

func (x *GetCampaignsResponse) GetCampaignDialogTitle() string {
	if x != nil {
		return x.CampaignDialogTitle
	}
	return ""
}

func (x *GetCampaignsResponse) GetCampaignDialogMessage() string {
	if x != nil {
		return x.CampaignDialogMessage
	}
	return ""
}

type GetServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalonId string   `protobuf:"bytes,1,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	Locales []string `protobuf:"bytes,2,rep,name=locales,proto3" json:"locales,omitempty"`
}

func (x *GetServicesRequest) Reset() {
	*x = GetServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesRequest) ProtoMessage() {}

func (x *GetServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesRequest.ProtoReflect.Descriptor instead.
func (*GetServicesRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetServicesRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *GetServicesRequest) GetLocales() []string {
	if x != nil {
		return x.Locales
	}
	return nil
}

type GetServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *productspb.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// available_count will reflect how many of this specific service can be purchased.
	AvailableCount uint32 `protobuf:"varint,2,opt,name=available_count,json=availableCount,proto3" json:"available_count,omitempty"`
}

func (x *GetServicesResponse) Reset() {
	*x = GetServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesResponse) ProtoMessage() {}

func (x *GetServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesResponse.ProtoReflect.Descriptor instead.
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetServicesResponse) GetService() *productspb.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *GetServicesResponse) GetAvailableCount() uint32 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

type GetProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalonId string                 `protobuf:"bytes,1,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	Locales []string               `protobuf:"bytes,2,rep,name=locales,proto3" json:"locales,omitempty"`
	Auth    *authpb.Authentication `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetProductsRequest) Reset() {
	*x = GetProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsRequest) ProtoMessage() {}

func (x *GetProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsRequest.ProtoReflect.Descriptor instead.
func (*GetProductsRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetProductsRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *GetProductsRequest) GetLocales() []string {
	if x != nil {
		return x.Locales
	}
	return nil
}

func (x *GetProductsRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product    *productspb.Product `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	StockCount uint32              `protobuf:"varint,2,opt,name=stock_count,json=stockCount,proto3" json:"stock_count,omitempty"`
}

func (x *GetProductsResponse) Reset() {
	*x = GetProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsResponse) ProtoMessage() {}

func (x *GetProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsResponse.ProtoReflect.Descriptor instead.
func (*GetProductsResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetProductsResponse) GetProduct() *productspb.Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *GetProductsResponse) GetStockCount() uint32 {
	if x != nil {
		return x.StockCount
	}
	return 0
}

type GetWaitingStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// transaction_id should be a Transaction connected to a Service, not a Product.
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GetWaitingStatusRequest) Reset() {
	*x = GetWaitingStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWaitingStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWaitingStatusRequest) ProtoMessage() {}

func (x *GetWaitingStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWaitingStatusRequest.ProtoReflect.Descriptor instead.
func (*GetWaitingStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetWaitingStatusRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GetWaitingStatusRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GetWaitingStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *BookingDetails `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *GetWaitingStatusResponse) Reset() {
	*x = GetWaitingStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWaitingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWaitingStatusResponse) ProtoMessage() {}

func (x *GetWaitingStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWaitingStatusResponse.ProtoReflect.Descriptor instead.
func (*GetWaitingStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{22}
}

func (x *GetWaitingStatusResponse) GetBooking() *BookingDetails {
	if x != nil {
		return x.Booking
	}
	return nil
}

type ListTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth            *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	IncludeActive   bool                   `protobuf:"varint,2,opt,name=include_active,json=includeActive,proto3" json:"include_active,omitempty"`
	IncludeHistoric bool                   `protobuf:"varint,3,opt,name=include_historic,json=includeHistoric,proto3" json:"include_historic,omitempty"`
}

func (x *ListTransactionsRequest) Reset() {
	*x = ListTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsRequest) ProtoMessage() {}

func (x *ListTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{23}
}

func (x *ListTransactionsRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ListTransactionsRequest) GetIncludeActive() bool {
	if x != nil {
		return x.IncludeActive
	}
	return false
}

func (x *ListTransactionsRequest) GetIncludeHistoric() bool {
	if x != nil {
		return x.IncludeHistoric
	}
	return false
}

type ListTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveServices   []*ServiceTransaction `protobuf:"bytes,1,rep,name=active_services,json=activeServices,proto3" json:"active_services,omitempty"`
	ActiveProducts   []*ProductTransaction `protobuf:"bytes,2,rep,name=active_products,json=activeProducts,proto3" json:"active_products,omitempty"`
	HistoricServices []*ServiceTransaction `protobuf:"bytes,3,rep,name=historic_services,json=historicServices,proto3" json:"historic_services,omitempty"`
	HistoricProducts []*ProductTransaction `protobuf:"bytes,4,rep,name=historic_products,json=historicProducts,proto3" json:"historic_products,omitempty"`
}

func (x *ListTransactionsResponse) Reset() {
	*x = ListTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransactionsResponse) ProtoMessage() {}

func (x *ListTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{24}
}

func (x *ListTransactionsResponse) GetActiveServices() []*ServiceTransaction {
	if x != nil {
		return x.ActiveServices
	}
	return nil
}

func (x *ListTransactionsResponse) GetActiveProducts() []*ProductTransaction {
	if x != nil {
		return x.ActiveProducts
	}
	return nil
}

func (x *ListTransactionsResponse) GetHistoricServices() []*ServiceTransaction {
	if x != nil {
		return x.HistoricServices
	}
	return nil
}

func (x *ListTransactionsResponse) GetHistoricProducts() []*ProductTransaction {
	if x != nil {
		return x.HistoricProducts
	}
	return nil
}

type CanRedeemVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *authpb.Authentication     `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Voucher *paymentspb.VoucherRequest `protobuf:"bytes,2,opt,name=voucher,proto3" json:"voucher,omitempty"`
	SalonId string                     `protobuf:"bytes,3,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
}

func (x *CanRedeemVoucherRequest) Reset() {
	*x = CanRedeemVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanRedeemVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanRedeemVoucherRequest) ProtoMessage() {}

func (x *CanRedeemVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanRedeemVoucherRequest.ProtoReflect.Descriptor instead.
func (*CanRedeemVoucherRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{25}
}

func (x *CanRedeemVoucherRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CanRedeemVoucherRequest) GetVoucher() *paymentspb.VoucherRequest {
	if x != nil {
		return x.Voucher
	}
	return nil
}

func (x *CanRedeemVoucherRequest) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

type CanRedeemVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanRedeem bool `protobuf:"varint,1,opt,name=can_redeem,json=canRedeem,proto3" json:"can_redeem,omitempty"`
	// If the voucher could not be redeemed, the localized reason will be set.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CanRedeemVoucherResponse) Reset() {
	*x = CanRedeemVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanRedeemVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanRedeemVoucherResponse) ProtoMessage() {}

func (x *CanRedeemVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanRedeemVoucherResponse.ProtoReflect.Descriptor instead.
func (*CanRedeemVoucherResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{26}
}

func (x *CanRedeemVoucherResponse) GetCanRedeem() bool {
	if x != nil {
		return x.CanRedeem
	}
	return false
}

func (x *CanRedeemVoucherResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CreateVoucherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *CreateVoucherRequest) Reset() {
	*x = CreateVoucherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoucherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoucherRequest) ProtoMessage() {}

func (x *CreateVoucherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoucherRequest.ProtoReflect.Descriptor instead.
func (*CreateVoucherRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{27}
}

func (x *CreateVoucherRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

type CreateVoucherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voucher *paymentspb.VoucherResponse `protobuf:"bytes,1,opt,name=voucher,proto3" json:"voucher,omitempty"`
}

func (x *CreateVoucherResponse) Reset() {
	*x = CreateVoucherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoucherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoucherResponse) ProtoMessage() {}

func (x *CreateVoucherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoucherResponse.ProtoReflect.Descriptor instead.
func (*CreateVoucherResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{28}
}

func (x *CreateVoucherResponse) GetVoucher() *paymentspb.VoucherResponse {
	if x != nil {
		return x.Voucher
	}
	return nil
}

type GetReferralStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetReferralStatusRequest) Reset() {
	*x = GetReferralStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralStatusRequest) ProtoMessage() {}

func (x *GetReferralStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralStatusRequest.ProtoReflect.Descriptor instead.
func (*GetReferralStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{29}
}

func (x *GetReferralStatusRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetReferralStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentReferralCount uint32                        `protobuf:"varint,1,opt,name=current_referral_count,json=currentReferralCount,proto3" json:"current_referral_count,omitempty"`
	TargetReferralCount  uint32                        `protobuf:"varint,2,opt,name=target_referral_count,json=targetReferralCount,proto3" json:"target_referral_count,omitempty"`
	Voucher              []*paymentspb.VoucherResponse `protobuf:"bytes,3,rep,name=voucher,proto3" json:"voucher,omitempty"`
}

func (x *GetReferralStatusResponse) Reset() {
	*x = GetReferralStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralStatusResponse) ProtoMessage() {}

func (x *GetReferralStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralStatusResponse.ProtoReflect.Descriptor instead.
func (*GetReferralStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{30}
}

func (x *GetReferralStatusResponse) GetCurrentReferralCount() uint32 {
	if x != nil {
		return x.CurrentReferralCount
	}
	return 0
}

func (x *GetReferralStatusResponse) GetTargetReferralCount() uint32 {
	if x != nil {
		return x.TargetReferralCount
	}
	return 0
}

func (x *GetReferralStatusResponse) GetVoucher() []*paymentspb.VoucherResponse {
	if x != nil {
		return x.Voucher
	}
	return nil
}

type CancelServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// transaction_id should be a Transaction connected to a Service, not a Product.
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CancelServiceRequest) Reset() {
	*x = CancelServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelServiceRequest) ProtoMessage() {}

func (x *CancelServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelServiceRequest.ProtoReflect.Descriptor instead.
func (*CancelServiceRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{31}
}

func (x *CancelServiceRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CancelServiceRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type CancelServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelServiceResponse) Reset() {
	*x = CancelServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelServiceResponse) ProtoMessage() {}

func (x *CancelServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelServiceResponse.ProtoReflect.Descriptor instead.
func (*CancelServiceResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{32}
}

type RemoteLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *authpb.Authentication `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Event string                 `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *RemoteLogRequest) Reset() {
	*x = RemoteLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteLogRequest) ProtoMessage() {}

func (x *RemoteLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteLogRequest.ProtoReflect.Descriptor instead.
func (*RemoteLogRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{33}
}

func (x *RemoteLogRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RemoteLogRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type RemoteLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoteLogResponse) Reset() {
	*x = RemoteLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteLogResponse) ProtoMessage() {}

func (x *RemoteLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteLogResponse.ProtoReflect.Descriptor instead.
func (*RemoteLogResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{34}
}

type TimeoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *TimeoutRequest) Reset() {
	*x = TimeoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutRequest) ProtoMessage() {}

func (x *TimeoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutRequest.ProtoReflect.Descriptor instead.
func (*TimeoutRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{35}
}

func (x *TimeoutRequest) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type TimeoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimeoutResponse) Reset() {
	*x = TimeoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutResponse) ProtoMessage() {}

func (x *TimeoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutResponse.ProtoReflect.Descriptor instead.
func (*TimeoutResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{36}
}

type ListActiveTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ListActiveTransactionsRequest) Reset() {
	*x = ListActiveTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActiveTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveTransactionsRequest) ProtoMessage() {}

func (x *ListActiveTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListActiveTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{37}
}

func (x *ListActiveTransactionsRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ListActiveTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTransactions []*ActiveServiceTransaction `protobuf:"bytes,1,rep,name=service_transactions,json=serviceTransactions,proto3" json:"service_transactions,omitempty"`
	ProductTransactions []*ActiveProductTransaction `protobuf:"bytes,2,rep,name=product_transactions,json=productTransactions,proto3" json:"product_transactions,omitempty"`
}

func (x *ListActiveTransactionsResponse) Reset() {
	*x = ListActiveTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActiveTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveTransactionsResponse) ProtoMessage() {}

func (x *ListActiveTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListActiveTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{38}
}

func (x *ListActiveTransactionsResponse) GetServiceTransactions() []*ActiveServiceTransaction {
	if x != nil {
		return x.ServiceTransactions
	}
	return nil
}

func (x *ListActiveTransactionsResponse) GetProductTransactions() []*ActiveProductTransaction {
	if x != nil {
		return x.ProductTransactions
	}
	return nil
}

type ListHistoricalTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth  *authpb.Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Since *utilspb.Timestamp     `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
}

func (x *ListHistoricalTransactionsRequest) Reset() {
	*x = ListHistoricalTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoricalTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalTransactionsRequest) ProtoMessage() {}

func (x *ListHistoricalTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListHistoricalTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{39}
}

func (x *ListHistoricalTransactionsRequest) GetAuth() *authpb.Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ListHistoricalTransactionsRequest) GetSince() *utilspb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

type ListHistoricalTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceTransactions            []*HistoricalServiceTransaction `protobuf:"bytes,1,rep,name=service_transactions,json=serviceTransactions,proto3" json:"service_transactions,omitempty"`
	ProductTransactions            []*HistoricalProductTransaction `protobuf:"bytes,2,rep,name=product_transactions,json=productTransactions,proto3" json:"product_transactions,omitempty"`
	DaysSinceLastHaircut           int32                           `protobuf:"varint,3,opt,name=days_since_last_haircut,json=daysSinceLastHaircut,proto3" json:"days_since_last_haircut,omitempty"`
	DaysSinceLastHaircutPictureUrl string                          `protobuf:"bytes,4,opt,name=days_since_last_haircut_picture_url,json=daysSinceLastHaircutPictureUrl,proto3" json:"days_since_last_haircut_picture_url,omitempty"`
	DaysSinceLastHaircutText       string                          `protobuf:"bytes,5,opt,name=days_since_last_haircut_text,json=daysSinceLastHaircutText,proto3" json:"days_since_last_haircut_text,omitempty"`
}

func (x *ListHistoricalTransactionsResponse) Reset() {
	*x = ListHistoricalTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistoricalTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoricalTransactionsResponse) ProtoMessage() {}

func (x *ListHistoricalTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoricalTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListHistoricalTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{40}
}

func (x *ListHistoricalTransactionsResponse) GetServiceTransactions() []*HistoricalServiceTransaction {
	if x != nil {
		return x.ServiceTransactions
	}
	return nil
}

func (x *ListHistoricalTransactionsResponse) GetProductTransactions() []*HistoricalProductTransaction {
	if x != nil {
		return x.ProductTransactions
	}
	return nil
}

func (x *ListHistoricalTransactionsResponse) GetDaysSinceLastHaircut() int32 {
	if x != nil {
		return x.DaysSinceLastHaircut
	}
	return 0
}

func (x *ListHistoricalTransactionsResponse) GetDaysSinceLastHaircutPictureUrl() string {
	if x != nil {
		return x.DaysSinceLastHaircutPictureUrl
	}
	return ""
}

func (x *ListHistoricalTransactionsResponse) GetDaysSinceLastHaircutText() string {
	if x != nil {
		return x.DaysSinceLastHaircutText
	}
	return ""
}

// BookingDetails contains information about the status of the booking.
type BookingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Estimated waiting-time, given in milliseconds.
	WaitingTime   int32  `protobuf:"varint,2,opt,name=waiting_time,json=waitingTime,proto3" json:"waiting_time,omitempty"`
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Deprecated: Do not use.
	Status          BookingStatus        `protobuf:"varint,4,opt,name=status,proto3,enum=server.BookingStatus" json:"status,omitempty"`
	PositionInQueue int32                `protobuf:"varint,5,opt,name=position_in_queue,json=positionInQueue,proto3" json:"position_in_queue,omitempty"`
	QueueUrl        string               `protobuf:"bytes,6,opt,name=queue_url,json=queueUrl,proto3" json:"queue_url,omitempty"`
	ServiceStatus   ServiceStatus        `protobuf:"varint,7,opt,name=service_status,json=serviceStatus,proto3,enum=server.ServiceStatus" json:"service_status,omitempty"`
	EstimatedWait   *ReadableWaitingTime `protobuf:"bytes,8,opt,name=estimated_wait,json=estimatedWait,proto3" json:"estimated_wait,omitempty"`
}

func (x *BookingDetails) Reset() {
	*x = BookingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingDetails) ProtoMessage() {}

func (x *BookingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingDetails.ProtoReflect.Descriptor instead.
func (*BookingDetails) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{41}
}

// Deprecated: Do not use.
func (x *BookingDetails) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BookingDetails) GetWaitingTime() int32 {
	if x != nil {
		return x.WaitingTime
	}
	return 0
}

func (x *BookingDetails) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// Deprecated: Do not use.
func (x *BookingDetails) GetStatus() BookingStatus {
	if x != nil {
		return x.Status
	}
	return BookingStatus_BOOKING_STATUS_INVALID
}

func (x *BookingDetails) GetPositionInQueue() int32 {
	if x != nil {
		return x.PositionInQueue
	}
	return 0
}

func (x *BookingDetails) GetQueueUrl() string {
	if x != nil {
		return x.QueueUrl
	}
	return ""
}

func (x *BookingDetails) GetServiceStatus() ServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return ServiceStatus_SERVICE_STATUS_INVALID
}

func (x *BookingDetails) GetEstimatedWait() *ReadableWaitingTime {
	if x != nil {
		return x.EstimatedWait
	}
	return nil
}

// OpeningTime describes opening-hours.
type OpeningTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A boolean indicating whether the salon is open or not.
	Open bool `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"`
	// Opening-time, given as milliseconds after midnight.
	From uint32 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	// Closing-time, given as milliseconds after midnight.
	To uint32 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *OpeningTime) Reset() {
	*x = OpeningTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpeningTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpeningTime) ProtoMessage() {}

func (x *OpeningTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpeningTime.ProtoReflect.Descriptor instead.
func (*OpeningTime) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{42}
}

func (x *OpeningTime) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *OpeningTime) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *OpeningTime) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

// Timetable describes the opening-times for a week.
type Timetable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mon *OpeningTime `protobuf:"bytes,1,opt,name=mon,proto3" json:"mon,omitempty"`
	Tue *OpeningTime `protobuf:"bytes,2,opt,name=tue,proto3" json:"tue,omitempty"`
	Wed *OpeningTime `protobuf:"bytes,3,opt,name=wed,proto3" json:"wed,omitempty"`
	Thu *OpeningTime `protobuf:"bytes,4,opt,name=thu,proto3" json:"thu,omitempty"`
	Fri *OpeningTime `protobuf:"bytes,5,opt,name=fri,proto3" json:"fri,omitempty"`
	Sat *OpeningTime `protobuf:"bytes,6,opt,name=sat,proto3" json:"sat,omitempty"`
	Sun *OpeningTime `protobuf:"bytes,7,opt,name=sun,proto3" json:"sun,omitempty"`
}

func (x *Timetable) Reset() {
	*x = Timetable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timetable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timetable) ProtoMessage() {}

func (x *Timetable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timetable.ProtoReflect.Descriptor instead.
func (*Timetable) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{43}
}

func (x *Timetable) GetMon() *OpeningTime {
	if x != nil {
		return x.Mon
	}
	return nil
}

func (x *Timetable) GetTue() *OpeningTime {
	if x != nil {
		return x.Tue
	}
	return nil
}

func (x *Timetable) GetWed() *OpeningTime {
	if x != nil {
		return x.Wed
	}
	return nil
}

func (x *Timetable) GetThu() *OpeningTime {
	if x != nil {
		return x.Thu
	}
	return nil
}

func (x *Timetable) GetFri() *OpeningTime {
	if x != nil {
		return x.Fri
	}
	return nil
}

func (x *Timetable) GetSat() *OpeningTime {
	if x != nil {
		return x.Sat
	}
	return nil
}

func (x *Timetable) GetSun() *OpeningTime {
	if x != nil {
		return x.Sun
	}
	return nil
}

// Salon describes the information about a salon.
type Salon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Estimated waiting-time, given in milliseconds.
	WaitingTime  int32          `protobuf:"varint,2,opt,name=waiting_time,json=waitingTime,proto3" json:"waiting_time,omitempty"`
	InQueue      uint32         `protobuf:"varint,3,opt,name=in_queue,json=inQueue,proto3" json:"in_queue,omitempty"`
	Name         string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	City         string         `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Country      string         `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Address      string         `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	PostNumber   string         `protobuf:"bytes,8,opt,name=post_number,json=postNumber,proto3" json:"post_number,omitempty"`
	Post         string         `protobuf:"bytes,9,opt,name=post,proto3" json:"post,omitempty"`
	Phone        string         `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
	Email        string         `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	Times        *Timetable     `protobuf:"bytes,12,opt,name=times,proto3" json:"times,omitempty"`
	Open         bool           `protobuf:"varint,13,opt,name=open,proto3" json:"open,omitempty"`
	Location     *Location      `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	HaircutPrice *moneypb.Price `protobuf:"bytes,15,opt,name=haircut_price,json=haircutPrice,proto3" json:"haircut_price,omitempty"`
	// Relative location is a short snippet about where the salon is located, e.g. under the escalator in the 2nd floor.
	RelativeLocation string `protobuf:"bytes,16,opt,name=relative_location,json=relativeLocation,proto3" json:"relative_location,omitempty"`
	// The currency the salon uses.
	Currency *moneypb.Currency `protobuf:"bytes,17,opt,name=currency,proto3" json:"currency,omitempty"`
	// The phone-prefix to use when registering users, such as "+47" or "+46".
	DefaultPhonePrefix string               `protobuf:"bytes,18,opt,name=default_phone_prefix,json=defaultPhonePrefix,proto3" json:"default_phone_prefix,omitempty"`
	EstimatedWait      *ReadableWaitingTime `protobuf:"bytes,19,opt,name=estimated_wait,json=estimatedWait,proto3" json:"estimated_wait,omitempty"`
	// Precision of the waiting-time.
	Precision WaitingTimePrecision `protobuf:"varint,20,opt,name=precision,proto3,enum=server.WaitingTimePrecision" json:"precision,omitempty"`
	// The currently available payment solutions for this salon.
	Providers *AvailablePaymentProviders `protobuf:"bytes,21,opt,name=providers,proto3" json:"providers,omitempty"`
	// Is referring enabled for this salon
	IsReferringEnabled    bool                           `protobuf:"varint,22,opt,name=is_referring_enabled,json=isReferringEnabled,proto3" json:"is_referring_enabled,omitempty"`
	AvailableHairdressers *AvailableHairdressersResponse `protobuf:"bytes,23,opt,name=available_hairdressers,json=availableHairdressers,proto3" json:"available_hairdressers,omitempty"`
}

func (x *Salon) Reset() {
	*x = Salon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Salon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Salon) ProtoMessage() {}

func (x *Salon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Salon.ProtoReflect.Descriptor instead.
func (*Salon) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{44}
}

func (x *Salon) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Salon) GetWaitingTime() int32 {
	if x != nil {
		return x.WaitingTime
	}
	return 0
}

func (x *Salon) GetInQueue() uint32 {
	if x != nil {
		return x.InQueue
	}
	return 0
}

func (x *Salon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Salon) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Salon) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Salon) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Salon) GetPostNumber() string {
	if x != nil {
		return x.PostNumber
	}
	return ""
}

func (x *Salon) GetPost() string {
	if x != nil {
		return x.Post
	}
	return ""
}

func (x *Salon) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Salon) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Salon) GetTimes() *Timetable {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *Salon) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Salon) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Salon) GetHaircutPrice() *moneypb.Price {
	if x != nil {
		return x.HaircutPrice
	}
	return nil
}

func (x *Salon) GetRelativeLocation() string {
	if x != nil {
		return x.RelativeLocation
	}
	return ""
}

func (x *Salon) GetCurrency() *moneypb.Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Salon) GetDefaultPhonePrefix() string {
	if x != nil {
		return x.DefaultPhonePrefix
	}
	return ""
}

func (x *Salon) GetEstimatedWait() *ReadableWaitingTime {
	if x != nil {
		return x.EstimatedWait
	}
	return nil
}

func (x *Salon) GetPrecision() WaitingTimePrecision {
	if x != nil {
		return x.Precision
	}
	return WaitingTimePrecision_WAITING_TIME_PRECISION_INVALID
}

func (x *Salon) GetProviders() *AvailablePaymentProviders {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *Salon) GetIsReferringEnabled() bool {
	if x != nil {
		return x.IsReferringEnabled
	}
	return false
}

func (x *Salon) GetAvailableHairdressers() *AvailableHairdressersResponse {
	if x != nil {
		return x.AvailableHairdressers
	}
	return nil
}

// Location describes a geo-location on earth, given in Decimal degrees: https://en.wikipedia.org/wiki/Decimal_degrees
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{45}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

// ServiceTransaction describes a purchased service.
type ServiceTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Service Transaction-ID: Used to get Waiting-status.
	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegisteredTime *utilspb.Timestamp `protobuf:"bytes,2,opt,name=registered_time,json=registeredTime,proto3" json:"registered_time,omitempty"`
	PaymentTime    *utilspb.Timestamp `protobuf:"bytes,3,opt,name=payment_time,json=paymentTime,proto3" json:"payment_time,omitempty"`
	StartedTime    *utilspb.Timestamp `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	CompletedTime  *utilspb.Timestamp `protobuf:"bytes,5,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"`
	// The service that was purchased.
	Service *productspb.Service `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	// Which salon the purchase was at.
	SalonId string `protobuf:"bytes,7,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	// The name of the customer. Might be "Name 1" or "Name 2" if the customer purchased multiple haircuts at the same time.
	CustomerName string `protobuf:"bytes,8,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	QueueUrl     string `protobuf:"bytes,9,opt,name=queue_url,json=queueUrl,proto3" json:"queue_url,omitempty"`
}

func (x *ServiceTransaction) Reset() {
	*x = ServiceTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTransaction) ProtoMessage() {}

func (x *ServiceTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTransaction.ProtoReflect.Descriptor instead.
func (*ServiceTransaction) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{46}
}

func (x *ServiceTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceTransaction) GetRegisteredTime() *utilspb.Timestamp {
	if x != nil {
		return x.RegisteredTime
	}
	return nil
}

func (x *ServiceTransaction) GetPaymentTime() *utilspb.Timestamp {
	if x != nil {
		return x.PaymentTime
	}
	return nil
}

func (x *ServiceTransaction) GetStartedTime() *utilspb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *ServiceTransaction) GetCompletedTime() *utilspb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *ServiceTransaction) GetService() *productspb.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ServiceTransaction) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *ServiceTransaction) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *ServiceTransaction) GetQueueUrl() string {
	if x != nil {
		return x.QueueUrl
	}
	return ""
}

// ProductTransaction describes a purchased product.
type ProductTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Product Transaction-ID: Used when registering a product as picked up.
	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegisteredTime *utilspb.Timestamp `protobuf:"bytes,2,opt,name=registered_time,json=registeredTime,proto3" json:"registered_time,omitempty"`
	PaymentTime    *utilspb.Timestamp `protobuf:"bytes,3,opt,name=payment_time,json=paymentTime,proto3" json:"payment_time,omitempty"`
	StartedTime    *utilspb.Timestamp `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	CompletedTime  *utilspb.Timestamp `protobuf:"bytes,5,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"`
	// The service that was purchased.
	Product *productspb.Product `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	// Which salon the purchase was at.
	SalonId string `protobuf:"bytes,7,opt,name=salon_id,json=salonId,proto3" json:"salon_id,omitempty"`
	// How many of the same product is tied to the same product-purchase-id.
	Quantity uint32 `protobuf:"varint,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ProductTransaction) Reset() {
	*x = ProductTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductTransaction) ProtoMessage() {}

func (x *ProductTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductTransaction.ProtoReflect.Descriptor instead.
func (*ProductTransaction) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{47}
}

func (x *ProductTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductTransaction) GetRegisteredTime() *utilspb.Timestamp {
	if x != nil {
		return x.RegisteredTime
	}
	return nil
}

func (x *ProductTransaction) GetPaymentTime() *utilspb.Timestamp {
	if x != nil {
		return x.PaymentTime
	}
	return nil
}

func (x *ProductTransaction) GetStartedTime() *utilspb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *ProductTransaction) GetCompletedTime() *utilspb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *ProductTransaction) GetProduct() *productspb.Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductTransaction) GetSalonId() string {
	if x != nil {
		return x.SalonId
	}
	return ""
}

func (x *ProductTransaction) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// ServiceTransaction describes a purchased service.
type ActiveServiceTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Service Transaction-ID: Used to get Waiting-status.
	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BatchId        string             `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	RegisteredTime *utilspb.Timestamp `protobuf:"bytes,3,opt,name=registered_time,json=registeredTime,proto3" json:"registered_time,omitempty"`
	PaymentTime    *utilspb.Timestamp `protobuf:"bytes,4,opt,name=payment_time,json=paymentTime,proto3" json:"payment_time,omitempty"`
	StartedTime    *utilspb.Timestamp `protobuf:"bytes,5,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	CompletedTime  *utilspb.Timestamp `protobuf:"bytes,6,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"`
	// The service that was purchased.
	Service *productspb.Service `protobuf:"bytes,7,opt,name=service,proto3" json:"service,omitempty"`
	// Which salon the purchase was at.
	SalonInfo     *SalonInfo               `protobuf:"bytes,8,opt,name=salon_info,json=salonInfo,proto3" json:"salon_info,omitempty"`
	PaymentMethod paymentspb.PaymentMethod `protobuf:"varint,9,opt,name=payment_method,json=paymentMethod,proto3,enum=payments.PaymentMethod" json:"payment_method,omitempty"`
	// The name of the customer. Might be "Name 1" or "Name 2" if the customer purchased multiple haircuts at the same time.
	CustomerName string `protobuf:"bytes,10,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	QueueUrl     string `protobuf:"bytes,11,opt,name=queue_url,json=queueUrl,proto3" json:"queue_url,omitempty"`
}

func (x *ActiveServiceTransaction) Reset() {
	*x = ActiveServiceTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveServiceTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveServiceTransaction) ProtoMessage() {}

func (x *ActiveServiceTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveServiceTransaction.ProtoReflect.Descriptor instead.
func (*ActiveServiceTransaction) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{48}
}

func (x *ActiveServiceTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActiveServiceTransaction) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *ActiveServiceTransaction) GetRegisteredTime() *utilspb.Timestamp {
	if x != nil {
		return x.RegisteredTime
	}
	return nil
}

func (x *ActiveServiceTransaction) GetPaymentTime() *utilspb.Timestamp {
	if x != nil {
		return x.PaymentTime
	}
	return nil
}

func (x *ActiveServiceTransaction) GetStartedTime() *utilspb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *ActiveServiceTransaction) GetCompletedTime() *utilspb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *ActiveServiceTransaction) GetService() *productspb.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ActiveServiceTransaction) GetSalonInfo() *SalonInfo {
	if x != nil {
		return x.SalonInfo
	}
	return nil
}

func (x *ActiveServiceTransaction) GetPaymentMethod() paymentspb.PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return paymentspb.PaymentMethod(0)
}

func (x *ActiveServiceTransaction) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *ActiveServiceTransaction) GetQueueUrl() string {
	if x != nil {
		return x.QueueUrl
	}
	return ""
}

// ProductTransaction describes a purchased product.
type ActiveProductTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Which salon the purchase was at.
	SalonInfo     *SalonInfo                   `protobuf:"bytes,2,opt,name=salon_info,json=salonInfo,proto3" json:"salon_info,omitempty"`
	PaymentMethod paymentspb.PaymentMethod     `protobuf:"varint,3,opt,name=payment_method,json=paymentMethod,proto3,enum=payments.PaymentMethod" json:"payment_method,omitempty"`
	LineItems     []*productspb.ActiveLineItem `protobuf:"bytes,4,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
}

func (x *ActiveProductTransaction) Reset() {
	*x = ActiveProductTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveProductTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveProductTransaction) ProtoMessage() {}

func (x *ActiveProductTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveProductTransaction.ProtoReflect.Descriptor instead.
func (*ActiveProductTransaction) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{49}
}

func (x *ActiveProductTransaction) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *ActiveProductTransaction) GetSalonInfo() *SalonInfo {
	if x != nil {
		return x.SalonInfo
	}
	return nil
}

func (x *ActiveProductTransaction) GetPaymentMethod() paymentspb.PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return paymentspb.PaymentMethod(0)
}

func (x *ActiveProductTransaction) GetLineItems() []*productspb.ActiveLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

// ServiceTransaction describes a purchased service.
type HistoricalServiceTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Service Transaction-ID: Used to get Waiting-status.
	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BatchId        string             `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	RegisteredTime *utilspb.Timestamp `protobuf:"bytes,3,opt,name=registered_time,json=registeredTime,proto3" json:"registered_time,omitempty"`
	PaymentTime    *utilspb.Timestamp `protobuf:"bytes,4,opt,name=payment_time,json=paymentTime,proto3" json:"payment_time,omitempty"`
	StartedTime    *utilspb.Timestamp `protobuf:"bytes,5,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	CompletedTime  *utilspb.Timestamp `protobuf:"bytes,6,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"`
	// The service that was purchased.
	Service *productspb.Service `protobuf:"bytes,7,opt,name=service,proto3" json:"service,omitempty"`
	// Which salon the purchase was at.
	SalonInfo *SalonInfo `protobuf:"bytes,8,opt,name=salon_info,json=salonInfo,proto3" json:"salon_info,omitempty"`
	// The name of the customer. Might be "Name 1" or "Name 2" if the customer purchased multiple haircuts at the same time.
	CustomerName    string                     `protobuf:"bytes,9,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	QueueUrl        string                     `protobuf:"bytes,10,opt,name=queue_url,json=queueUrl,proto3" json:"queue_url,omitempty"`
	PaymentMethod   paymentspb.PaymentMethod   `protobuf:"varint,11,opt,name=payment_method,json=paymentMethod,proto3,enum=payments.PaymentMethod" json:"payment_method,omitempty"`
	RatingUrl       string                     `protobuf:"bytes,12,opt,name=rating_url,json=ratingUrl,proto3" json:"rating_url,omitempty"`
	Rating          int32                      `protobuf:"varint,13,opt,name=rating,proto3" json:"rating,omitempty"`
	RatingAvailable bool                       `protobuf:"varint,14,opt,name=rating_available,json=ratingAvailable,proto3" json:"rating_available,omitempty"`
	State           HistoricalTransactionState `protobuf:"varint,15,opt,name=state,proto3,enum=server.HistoricalTransactionState" json:"state,omitempty"`
	IsRefunded      bool                       `protobuf:"varint,16,opt,name=is_refunded,json=isRefunded,proto3" json:"is_refunded,omitempty"`
	ReceiptUrl      string                     `protobuf:"bytes,17,opt,name=receipt_url,json=receiptUrl,proto3" json:"receipt_url,omitempty"`
}

func (x *HistoricalServiceTransaction) Reset() {
	*x = HistoricalServiceTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalServiceTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalServiceTransaction) ProtoMessage() {}

func (x *HistoricalServiceTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalServiceTransaction.ProtoReflect.Descriptor instead.
func (*HistoricalServiceTransaction) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{50}
}

func (x *HistoricalServiceTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HistoricalServiceTransaction) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *HistoricalServiceTransaction) GetRegisteredTime() *utilspb.Timestamp {
	if x != nil {
		return x.RegisteredTime
	}
	return nil
}

func (x *HistoricalServiceTransaction) GetPaymentTime() *utilspb.Timestamp {
	if x != nil {
		return x.PaymentTime
	}
	return nil
}

func (x *HistoricalServiceTransaction) GetStartedTime() *utilspb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *HistoricalServiceTransaction) GetCompletedTime() *utilspb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *HistoricalServiceTransaction) GetService() *productspb.Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *HistoricalServiceTransaction) GetSalonInfo() *SalonInfo {
	if x != nil {
		return x.SalonInfo
	}
	return nil
}

func (x *HistoricalServiceTransaction) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *HistoricalServiceTransaction) GetQueueUrl() string {
	if x != nil {
		return x.QueueUrl
	}
	return ""
}

func (x *HistoricalServiceTransaction) GetPaymentMethod() paymentspb.PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return paymentspb.PaymentMethod(0)
}

func (x *HistoricalServiceTransaction) GetRatingUrl() string {
	if x != nil {
		return x.RatingUrl
	}
	return ""
}

func (x *HistoricalServiceTransaction) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *HistoricalServiceTransaction) GetRatingAvailable() bool {
	if x != nil {
		return x.RatingAvailable
	}
	return false
}

func (x *HistoricalServiceTransaction) GetState() HistoricalTransactionState {
	if x != nil {
		return x.State
	}
	return HistoricalTransactionState_HISTORICAL_TRANSACTION_STATE_INVALID
}

func (x *HistoricalServiceTransaction) GetIsRefunded() bool {
	if x != nil {
		return x.IsRefunded
	}
	return false
}

func (x *HistoricalServiceTransaction) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

// ProductTransaction describes a purchased product.
type HistoricalProductTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Which salon the purchase was at.
	SalonInfo     *SalonInfo                       `protobuf:"bytes,2,opt,name=salon_info,json=salonInfo,proto3" json:"salon_info,omitempty"`
	PaymentMethod paymentspb.PaymentMethod         `protobuf:"varint,3,opt,name=payment_method,json=paymentMethod,proto3,enum=payments.PaymentMethod" json:"payment_method,omitempty"`
	ReceiptUrl    string                           `protobuf:"bytes,4,opt,name=receipt_url,json=receiptUrl,proto3" json:"receipt_url,omitempty"`
	LineItems     []*productspb.HistoricalLineItem `protobuf:"bytes,5,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
}

func (x *HistoricalProductTransaction) Reset() {
	*x = HistoricalProductTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalProductTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalProductTransaction) ProtoMessage() {}

func (x *HistoricalProductTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalProductTransaction.ProtoReflect.Descriptor instead.
func (*HistoricalProductTransaction) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{51}
}

func (x *HistoricalProductTransaction) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *HistoricalProductTransaction) GetSalonInfo() *SalonInfo {
	if x != nil {
		return x.SalonInfo
	}
	return nil
}

func (x *HistoricalProductTransaction) GetPaymentMethod() paymentspb.PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return paymentspb.PaymentMethod(0)
}

func (x *HistoricalProductTransaction) GetReceiptUrl() string {
	if x != nil {
		return x.ReceiptUrl
	}
	return ""
}

func (x *HistoricalProductTransaction) GetLineItems() []*productspb.HistoricalLineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

// SalonInfo represents essential info about a salon.
type SalonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SalonInfo) Reset() {
	*x = SalonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalonInfo) ProtoMessage() {}

func (x *SalonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalonInfo.ProtoReflect.Descriptor instead.
func (*SalonInfo) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{52}
}

func (x *SalonInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SalonInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SalonInfo) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// ReadableWaitingTime describes a waiting-time in a readable format.
type ReadableWaitingTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short format, e.g. "<5m".
	ShortFormat string `protobuf:"bytes,1,opt,name=short_format,json=shortFormat,proto3" json:"short_format,omitempty"`
	// Long format, e.g. "Less than 5 min".
	LongFormat string `protobuf:"bytes,2,opt,name=long_format,json=longFormat,proto3" json:"long_format,omitempty"`
}

func (x *ReadableWaitingTime) Reset() {
	*x = ReadableWaitingTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadableWaitingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadableWaitingTime) ProtoMessage() {}

func (x *ReadableWaitingTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadableWaitingTime.ProtoReflect.Descriptor instead.
func (*ReadableWaitingTime) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{53}
}

func (x *ReadableWaitingTime) GetShortFormat() string {
	if x != nil {
		return x.ShortFormat
	}
	return ""
}

func (x *ReadableWaitingTime) GetLongFormat() string {
	if x != nil {
		return x.LongFormat
	}
	return ""
}

// AvailablePaymentProviders contains all available payment solutions for any given salon.
type AvailablePaymentProviders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voucher bool `protobuf:"varint,1,opt,name=voucher,proto3" json:"voucher,omitempty"`
	Stripe  bool `protobuf:"varint,2,opt,name=stripe,proto3" json:"stripe,omitempty"`
	Vipps   bool `protobuf:"varint,3,opt,name=vipps,proto3" json:"vipps,omitempty"`
}

func (x *AvailablePaymentProviders) Reset() {
	*x = AvailablePaymentProviders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_cutters_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailablePaymentProviders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailablePaymentProviders) ProtoMessage() {}

func (x *AvailablePaymentProviders) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_cutters_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailablePaymentProviders.ProtoReflect.Descriptor instead.
func (*AvailablePaymentProviders) Descriptor() ([]byte, []int) {
	return file_proto_server_cutters_api_proto_rawDescGZIP(), []int{54}
}

func (x *AvailablePaymentProviders) GetVoucher() bool {
	if x != nil {
		return x.Voucher
	}
	return false
}

func (x *AvailablePaymentProviders) GetStripe() bool {
	if x != nil {
		return x.Stripe
	}
	return false
}

func (x *AvailablePaymentProviders) GetVipps() bool {
	if x != nil {
		return x.Vipps
	}
	return false
}

var File_proto_server_cutters_api_proto protoreflect.FileDescriptor

var file_proto_server_cutters_api_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63,
	0x75, 0x74, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x1c,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x61, 0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x5f, 0x68, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x48, 0x61,
	0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x68, 0x61,
	0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x69, 0x72, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x0b, 0x48, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x52, 0x05, 0x73,
	0x61, 0x6c, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x52, 0x05,
	0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x75,
	0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xcd, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x4f, 0x66, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x4b, 0x65, 0x79, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64,
	0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x4f, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x67, 0x0a,
	0x24, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd0, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x63, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4c,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x95, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x22, 0xb6, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x92, 0x01,
	0x0a, 0x17, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x51, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x4c, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xba, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x10, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x13,
	0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x11, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x49, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xca, 0x01,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x75, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x22, 0x9a, 0x03, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x57, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61,
	0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61,
	0x69, 0x72, 0x63, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x79,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x69, 0x72, 0x63, 0x75,
	0x74, 0x12, 0x4b, 0x0a, 0x23, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x5f, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e,
	0x64, 0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x69,
	0x72, 0x63, 0x75, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3e,
	0x0a, 0x1c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x48, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xee,
	0x02, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x69, 0x74, 0x22,
	0x45, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x6d, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x74,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x74,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x77, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x68, 0x75,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x74, 0x68, 0x75,
	0x12, 0x25, 0x0a, 0x03, 0x66, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x03, 0x66, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x03, 0x73, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x73, 0x61, 0x74, 0x12, 0x25,
	0x0a, 0x03, 0x73, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x03, 0x73, 0x75, 0x6e, 0x22, 0x8d, 0x07, 0x0a, 0x05, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0d, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x68, 0x61, 0x69, 0x72,
	0x63, 0x75, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x69, 0x72, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x6e, 0x67, 0x22, 0x8c, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0xe6, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x84, 0x04,
	0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61,
	0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0xe0, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a,
	0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe6, 0x05, 0x0a, 0x1c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c,
	0x22, 0x89, 0x02, 0x0a, 0x1c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a,
	0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x3b, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x09,
	0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x13, 0x52,
	0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x63, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x70, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x69, 0x70, 0x70, 0x73, 0x2a, 0xef, 0x01, 0x0a, 0x1a,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2a, 0x0a, 0x26, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x53,
	0x48, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xd5, 0x01,
	0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42,
	0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4f, 0x4f, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x53,
	0x48, 0x4f, 0x57, 0x10, 0x06, 0x2a, 0xc7, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a,
	0xa7, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x58, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x32, 0xf6, 0x0c, 0x0a, 0x0a, 0x43, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x41, 0x50, 0x49, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3d,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x1b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x55, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01,
	0x12, 0x55, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x69, 0x72, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61,
	0x69, 0x72, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x75, 0x74, 0x74, 0x65, 0x72, 0x73, 0x2d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_server_cutters_api_proto_rawDescOnce sync.Once
	file_proto_server_cutters_api_proto_rawDescData = file_proto_server_cutters_api_proto_rawDesc
)

func file_proto_server_cutters_api_proto_rawDescGZIP() []byte {
	file_proto_server_cutters_api_proto_rawDescOnce.Do(func() {
		file_proto_server_cutters_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_server_cutters_api_proto_rawDescData)
	})
	return file_proto_server_cutters_api_proto_rawDescData
}

var file_proto_server_cutters_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_server_cutters_api_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_proto_server_cutters_api_proto_goTypes = []interface{}{
	(HistoricalTransactionState)(0),              // 0: server.HistoricalTransactionState
	(BookingStatus)(0),                           // 1: server.BookingStatus
	(ServiceStatus)(0),                           // 2: server.ServiceStatus
	(WaitingTimePrecision)(0),                    // 3: server.WaitingTimePrecision
	(*AvailableHairdressersRequest)(nil),         // 4: server.AvailableHairdressersRequest
	(*AvailableHairdressersResponse)(nil),        // 5: server.AvailableHairdressersResponse
	(*Hairdresser)(nil),                          // 6: server.Hairdresser
	(*GetWaitingTimesRequest)(nil),               // 7: server.GetWaitingTimesRequest
	(*GetWaitingTimesResponse)(nil),              // 8: server.GetWaitingTimesResponse
	(*GetSalonRequest)(nil),                      // 9: server.GetSalonRequest
	(*GetSalonResponse)(nil),                     // 10: server.GetSalonResponse
	(*BookRequest)(nil),                          // 11: server.BookRequest
	(*BookResponse)(nil),                         // 12: server.BookResponse
	(*PurchaseRequest)(nil),                      // 13: server.PurchaseRequest
	(*PurchaseResponse)(nil),                     // 14: server.PurchaseResponse
	(*GetAvailablePaymentProvidersRequest)(nil),  // 15: server.GetAvailablePaymentProvidersRequest
	(*GetAvailablePaymentProvidersResponse)(nil), // 16: server.GetAvailablePaymentProvidersResponse
	(*GetPriceRequest)(nil),                      // 17: server.GetPriceRequest
	(*GetPriceResponse)(nil),                     // 18: server.GetPriceResponse
	(*GetCampaignsRequest)(nil),                  // 19: server.GetCampaignsRequest
	(*GetCampaignsResponse)(nil),                 // 20: server.GetCampaignsResponse
	(*GetServicesRequest)(nil),                   // 21: server.GetServicesRequest
	(*GetServicesResponse)(nil),                  // 22: server.GetServicesResponse
	(*GetProductsRequest)(nil),                   // 23: server.GetProductsRequest
	(*GetProductsResponse)(nil),                  // 24: server.GetProductsResponse
	(*GetWaitingStatusRequest)(nil),              // 25: server.GetWaitingStatusRequest
	(*GetWaitingStatusResponse)(nil),             // 26: server.GetWaitingStatusResponse
	(*ListTransactionsRequest)(nil),              // 27: server.ListTransactionsRequest
	(*ListTransactionsResponse)(nil),             // 28: server.ListTransactionsResponse
	(*CanRedeemVoucherRequest)(nil),              // 29: server.CanRedeemVoucherRequest
	(*CanRedeemVoucherResponse)(nil),             // 30: server.CanRedeemVoucherResponse
	(*CreateVoucherRequest)(nil),                 // 31: server.CreateVoucherRequest
	(*CreateVoucherResponse)(nil),                // 32: server.CreateVoucherResponse
	(*GetReferralStatusRequest)(nil),             // 33: server.GetReferralStatusRequest
	(*GetReferralStatusResponse)(nil),            // 34: server.GetReferralStatusResponse
	(*CancelServiceRequest)(nil),                 // 35: server.CancelServiceRequest
	(*CancelServiceResponse)(nil),                // 36: server.CancelServiceResponse
	(*RemoteLogRequest)(nil),                     // 37: server.RemoteLogRequest
	(*RemoteLogResponse)(nil),                    // 38: server.RemoteLogResponse
	(*TimeoutRequest)(nil),                       // 39: server.TimeoutRequest
	(*TimeoutResponse)(nil),                      // 40: server.TimeoutResponse
	(*ListActiveTransactionsRequest)(nil),        // 41: server.ListActiveTransactionsRequest
	(*ListActiveTransactionsResponse)(nil),       // 42: server.ListActiveTransactionsResponse
	(*ListHistoricalTransactionsRequest)(nil),    // 43: server.ListHistoricalTransactionsRequest
	(*ListHistoricalTransactionsResponse)(nil),   // 44: server.ListHistoricalTransactionsResponse
	(*BookingDetails)(nil),                       // 45: server.BookingDetails
	(*OpeningTime)(nil),                          // 46: server.OpeningTime
	(*Timetable)(nil),                            // 47: server.Timetable
	(*Salon)(nil),                                // 48: server.Salon
	(*Location)(nil),                             // 49: server.Location
	(*ServiceTransaction)(nil),                   // 50: server.ServiceTransaction
	(*ProductTransaction)(nil),                   // 51: server.ProductTransaction
	(*ActiveServiceTransaction)(nil),             // 52: server.ActiveServiceTransaction
	(*ActiveProductTransaction)(nil),             // 53: server.ActiveProductTransaction
	(*HistoricalServiceTransaction)(nil),         // 54: server.HistoricalServiceTransaction
	(*HistoricalProductTransaction)(nil),         // 55: server.HistoricalProductTransaction
	(*SalonInfo)(nil),                            // 56: server.SalonInfo
	(*ReadableWaitingTime)(nil),                  // 57: server.ReadableWaitingTime
	(*AvailablePaymentProviders)(nil),            // 58: server.AvailablePaymentProviders
	(*authpb.Authentication)(nil),                // 59: auth.Authentication
	(*utilspb.Empty)(nil),                        // 60: utils.Empty
	(*productspb.Product)(nil),                   // 61: products.Product
	(*paymentspb.PaymentRequest)(nil),            // 62: payments.PaymentRequest
	(*paymentspb.PaymentResponse)(nil),           // 63: payments.PaymentResponse
	(*productspb.ServiceRequest)(nil),            // 64: products.ServiceRequest
	(*productspb.ProductRequest)(nil),            // 65: products.ProductRequest
	(*paymentspb.VoucherRequest)(nil),            // 66: payments.VoucherRequest
	(*paymentspb.CouponCode)(nil),                // 67: payments.CouponCode
	(*moneypb.Price)(nil),                        // 68: money.Price
	(*paymentspb.VoucherCode)(nil),               // 69: payments.VoucherCode
	(*productspb.Service)(nil),                   // 70: products.Service
	(*paymentspb.VoucherResponse)(nil),           // 71: payments.VoucherResponse
	(*utilspb.Timestamp)(nil),                    // 72: utils.Timestamp
	(*moneypb.Currency)(nil),                     // 73: money.Currency
	(paymentspb.PaymentMethod)(0),                // 74: payments.PaymentMethod
	(*productspb.ActiveLineItem)(nil),            // 75: products.ActiveLineItem
	(*productspb.HistoricalLineItem)(nil),        // 76: products.HistoricalLineItem
}
var file_proto_server_cutters_api_proto_depIdxs = []int32{
	59,  // 0: server.AvailableHairdressersRequest.auth:type_name -> auth.Authentication
	6,   // 1: server.AvailableHairdressersResponse.hairdressers:type_name -> server.Hairdresser
	60,  // 2: server.GetWaitingTimesRequest.empty:type_name -> utils.Empty
	49,  // 3: server.GetWaitingTimesRequest.location:type_name -> server.Location
	48,  // 4: server.GetWaitingTimesResponse.salon:type_name -> server.Salon
	48,  // 5: server.GetSalonResponse.salon:type_name -> server.Salon
	59,  // 6: server.BookRequest.auth:type_name -> auth.Authentication
	61,  // 7: server.BookRequest.products:type_name -> products.Product
	62,  // 8: server.BookRequest.payment:type_name -> payments.PaymentRequest
	63,  // 9: server.BookResponse.payment:type_name -> payments.PaymentResponse
	45,  // 10: server.BookResponse.booking:type_name -> server.BookingDetails
	59,  // 11: server.PurchaseRequest.auth:type_name -> auth.Authentication
	64,  // 12: server.PurchaseRequest.services:type_name -> products.ServiceRequest
	65,  // 13: server.PurchaseRequest.products:type_name -> products.ProductRequest
	62,  // 14: server.PurchaseRequest.payment:type_name -> payments.PaymentRequest
	63,  // 15: server.PurchaseResponse.payment:type_name -> payments.PaymentResponse
	45,  // 16: server.PurchaseResponse.bookings:type_name -> server.BookingDetails
	59,  // 17: server.GetAvailablePaymentProvidersRequest.auth:type_name -> auth.Authentication
	58,  // 18: server.GetAvailablePaymentProvidersResponse.providers:type_name -> server.AvailablePaymentProviders
	59,  // 19: server.GetPriceRequest.auth:type_name -> auth.Authentication
	64,  // 20: server.GetPriceRequest.services:type_name -> products.ServiceRequest
	65,  // 21: server.GetPriceRequest.products:type_name -> products.ProductRequest
	66,  // 22: server.GetPriceRequest.voucher:type_name -> payments.VoucherRequest
	66,  // 23: server.GetPriceRequest.vouchers:type_name -> payments.VoucherRequest
	67,  // 24: server.GetPriceRequest.coupons:type_name -> payments.CouponCode
	68,  // 25: server.GetPriceResponse.price:type_name -> money.Price
	67,  // 26: server.GetPriceResponse.coupons:type_name -> payments.CouponCode
	69,  // 27: server.GetPriceResponse.vouchers:type_name -> payments.VoucherCode
	59,  // 28: server.GetCampaignsRequest.auth:type_name -> auth.Authentication
	70,  // 29: server.GetServicesResponse.service:type_name -> products.Service
	59,  // 30: server.GetProductsRequest.auth:type_name -> auth.Authentication
	61,  // 31: server.GetProductsResponse.product:type_name -> products.Product
	59,  // 32: server.GetWaitingStatusRequest.auth:type_name -> auth.Authentication
	45,  // 33: server.GetWaitingStatusResponse.booking:type_name -> server.BookingDetails
	59,  // 34: server.ListTransactionsRequest.auth:type_name -> auth.Authentication
	50,  // 35: server.ListTransactionsResponse.active_services:type_name -> server.ServiceTransaction
	51,  // 36: server.ListTransactionsResponse.active_products:type_name -> server.ProductTransaction
	50,  // 37: server.ListTransactionsResponse.historic_services:type_name -> server.ServiceTransaction
	51,  // 38: server.ListTransactionsResponse.historic_products:type_name -> server.ProductTransaction
	59,  // 39: server.CanRedeemVoucherRequest.auth:type_name -> auth.Authentication
	66,  // 40: server.CanRedeemVoucherRequest.voucher:type_name -> payments.VoucherRequest
	59,  // 41: server.CreateVoucherRequest.auth:type_name -> auth.Authentication
	71,  // 42: server.CreateVoucherResponse.voucher:type_name -> payments.VoucherResponse
	59,  // 43: server.GetReferralStatusRequest.auth:type_name -> auth.Authentication
	71,  // 44: server.GetReferralStatusResponse.voucher:type_name -> payments.VoucherResponse
	59,  // 45: server.CancelServiceRequest.auth:type_name -> auth.Authentication
	59,  // 46: server.RemoteLogRequest.auth:type_name -> auth.Authentication
	59,  // 47: server.ListActiveTransactionsRequest.auth:type_name -> auth.Authentication
	52,  // 48: server.ListActiveTransactionsResponse.service_transactions:type_name -> server.ActiveServiceTransaction
	53,  // 49: server.ListActiveTransactionsResponse.product_transactions:type_name -> server.ActiveProductTransaction
	59,  // 50: server.ListHistoricalTransactionsRequest.auth:type_name -> auth.Authentication
	72,  // 51: server.ListHistoricalTransactionsRequest.since:type_name -> utils.Timestamp
	54,  // 52: server.ListHistoricalTransactionsResponse.service_transactions:type_name -> server.HistoricalServiceTransaction
	55,  // 53: server.ListHistoricalTransactionsResponse.product_transactions:type_name -> server.HistoricalProductTransaction
	1,   // 54: server.BookingDetails.status:type_name -> server.BookingStatus
	2,   // 55: server.BookingDetails.service_status:type_name -> server.ServiceStatus
	57,  // 56: server.BookingDetails.estimated_wait:type_name -> server.ReadableWaitingTime
	46,  // 57: server.Timetable.mon:type_name -> server.OpeningTime
	46,  // 58: server.Timetable.tue:type_name -> server.OpeningTime
	46,  // 59: server.Timetable.wed:type_name -> server.OpeningTime
	46,  // 60: server.Timetable.thu:type_name -> server.OpeningTime
	46,  // 61: server.Timetable.fri:type_name -> server.OpeningTime
	46,  // 62: server.Timetable.sat:type_name -> server.OpeningTime
	46,  // 63: server.Timetable.sun:type_name -> server.OpeningTime
	47,  // 64: server.Salon.times:type_name -> server.Timetable
	49,  // 65: server.Salon.location:type_name -> server.Location
	68,  // 66: server.Salon.haircut_price:type_name -> money.Price
	73,  // 67: server.Salon.currency:type_name -> money.Currency
	57,  // 68: server.Salon.estimated_wait:type_name -> server.ReadableWaitingTime
	3,   // 69: server.Salon.precision:type_name -> server.WaitingTimePrecision
	58,  // 70: server.Salon.providers:type_name -> server.AvailablePaymentProviders
	5,   // 71: server.Salon.available_hairdressers:type_name -> server.AvailableHairdressersResponse
	72,  // 72: server.ServiceTransaction.registered_time:type_name -> utils.Timestamp
	72,  // 73: server.ServiceTransaction.payment_time:type_name -> utils.Timestamp
	72,  // 74: server.ServiceTransaction.started_time:type_name -> utils.Timestamp
	72,  // 75: server.ServiceTransaction.completed_time:type_name -> utils.Timestamp
	70,  // 76: server.ServiceTransaction.service:type_name -> products.Service
	72,  // 77: server.ProductTransaction.registered_time:type_name -> utils.Timestamp
	72,  // 78: server.ProductTransaction.payment_time:type_name -> utils.Timestamp
	72,  // 79: server.ProductTransaction.started_time:type_name -> utils.Timestamp
	72,  // 80: server.ProductTransaction.completed_time:type_name -> utils.Timestamp
	61,  // 81: server.ProductTransaction.product:type_name -> products.Product
	72,  // 82: server.ActiveServiceTransaction.registered_time:type_name -> utils.Timestamp
	72,  // 83: server.ActiveServiceTransaction.payment_time:type_name -> utils.Timestamp
	72,  // 84: server.ActiveServiceTransaction.started_time:type_name -> utils.Timestamp
	72,  // 85: server.ActiveServiceTransaction.completed_time:type_name -> utils.Timestamp
	70,  // 86: server.ActiveServiceTransaction.service:type_name -> products.Service
	56,  // 87: server.ActiveServiceTransaction.salon_info:type_name -> server.SalonInfo
	74,  // 88: server.ActiveServiceTransaction.payment_method:type_name -> payments.PaymentMethod
	56,  // 89: server.ActiveProductTransaction.salon_info:type_name -> server.SalonInfo
	74,  // 90: server.ActiveProductTransaction.payment_method:type_name -> payments.PaymentMethod
	75,  // 91: server.ActiveProductTransaction.line_items:type_name -> products.ActiveLineItem
	72,  // 92: server.HistoricalServiceTransaction.registered_time:type_name -> utils.Timestamp
	72,  // 93: server.HistoricalServiceTransaction.payment_time:type_name -> utils.Timestamp
	72,  // 94: server.HistoricalServiceTransaction.started_time:type_name -> utils.Timestamp
	72,  // 95: server.HistoricalServiceTransaction.completed_time:type_name -> utils.Timestamp
	70,  // 96: server.HistoricalServiceTransaction.service:type_name -> products.Service
	56,  // 97: server.HistoricalServiceTransaction.salon_info:type_name -> server.SalonInfo
	74,  // 98: server.HistoricalServiceTransaction.payment_method:type_name -> payments.PaymentMethod
	0,   // 99: server.HistoricalServiceTransaction.state:type_name -> server.HistoricalTransactionState
	56,  // 100: server.HistoricalProductTransaction.salon_info:type_name -> server.SalonInfo
	74,  // 101: server.HistoricalProductTransaction.payment_method:type_name -> payments.PaymentMethod
	76,  // 102: server.HistoricalProductTransaction.line_items:type_name -> products.HistoricalLineItem
	49,  // 103: server.SalonInfo.location:type_name -> server.Location
	7,   // 104: server.CuttersAPI.GetWaitingTimes:input_type -> server.GetWaitingTimesRequest
	9,   // 105: server.CuttersAPI.GetSalon:input_type -> server.GetSalonRequest
	11,  // 106: server.CuttersAPI.Book:input_type -> server.BookRequest
	13,  // 107: server.CuttersAPI.Purchase:input_type -> server.PurchaseRequest
	15,  // 108: server.CuttersAPI.GetAvailablePaymentProviders:input_type -> server.GetAvailablePaymentProvidersRequest
	17,  // 109: server.CuttersAPI.GetPrice:input_type -> server.GetPriceRequest
	19,  // 110: server.CuttersAPI.GetCampaigns:input_type -> server.GetCampaignsRequest
	21,  // 111: server.CuttersAPI.GetServices:input_type -> server.GetServicesRequest
	23,  // 112: server.CuttersAPI.GetProducts:input_type -> server.GetProductsRequest
	25,  // 113: server.CuttersAPI.GetWaitingStatus:input_type -> server.GetWaitingStatusRequest
	27,  // 114: server.CuttersAPI.ListTransactions:input_type -> server.ListTransactionsRequest
	29,  // 115: server.CuttersAPI.CanRedeemVoucher:input_type -> server.CanRedeemVoucherRequest
	31,  // 116: server.CuttersAPI.CreateVoucher:input_type -> server.CreateVoucherRequest
	33,  // 117: server.CuttersAPI.GetReferralStatus:input_type -> server.GetReferralStatusRequest
	35,  // 118: server.CuttersAPI.CancelService:input_type -> server.CancelServiceRequest
	37,  // 119: server.CuttersAPI.RemoteLog:input_type -> server.RemoteLogRequest
	39,  // 120: server.CuttersAPI.Timeout:input_type -> server.TimeoutRequest
	41,  // 121: server.CuttersAPI.ListActiveTransactions:input_type -> server.ListActiveTransactionsRequest
	43,  // 122: server.CuttersAPI.ListHistoricalTransactions:input_type -> server.ListHistoricalTransactionsRequest
	4,   // 123: server.CuttersAPI.GetAvailableHairdressers:input_type -> server.AvailableHairdressersRequest
	8,   // 124: server.CuttersAPI.GetWaitingTimes:output_type -> server.GetWaitingTimesResponse
	10,  // 125: server.CuttersAPI.GetSalon:output_type -> server.GetSalonResponse
	12,  // 126: server.CuttersAPI.Book:output_type -> server.BookResponse
	14,  // 127: server.CuttersAPI.Purchase:output_type -> server.PurchaseResponse
	16,  // 128: server.CuttersAPI.GetAvailablePaymentProviders:output_type -> server.GetAvailablePaymentProvidersResponse
	18,  // 129: server.CuttersAPI.GetPrice:output_type -> server.GetPriceResponse
	20,  // 130: server.CuttersAPI.GetCampaigns:output_type -> server.GetCampaignsResponse
	22,  // 131: server.CuttersAPI.GetServices:output_type -> server.GetServicesResponse
	24,  // 132: server.CuttersAPI.GetProducts:output_type -> server.GetProductsResponse
	26,  // 133: server.CuttersAPI.GetWaitingStatus:output_type -> server.GetWaitingStatusResponse
	28,  // 134: server.CuttersAPI.ListTransactions:output_type -> server.ListTransactionsResponse
	30,  // 135: server.CuttersAPI.CanRedeemVoucher:output_type -> server.CanRedeemVoucherResponse
	32,  // 136: server.CuttersAPI.CreateVoucher:output_type -> server.CreateVoucherResponse
	34,  // 137: server.CuttersAPI.GetReferralStatus:output_type -> server.GetReferralStatusResponse
	36,  // 138: server.CuttersAPI.CancelService:output_type -> server.CancelServiceResponse
	38,  // 139: server.CuttersAPI.RemoteLog:output_type -> server.RemoteLogResponse
	40,  // 140: server.CuttersAPI.Timeout:output_type -> server.TimeoutResponse
	42,  // 141: server.CuttersAPI.ListActiveTransactions:output_type -> server.ListActiveTransactionsResponse
	44,  // 142: server.CuttersAPI.ListHistoricalTransactions:output_type -> server.ListHistoricalTransactionsResponse
	5,   // 143: server.CuttersAPI.GetAvailableHairdressers:output_type -> server.AvailableHairdressersResponse
	124, // [124:144] is the sub-list for method output_type
	104, // [104:124] is the sub-list for method input_type
	104, // [104:104] is the sub-list for extension type_name
	104, // [104:104] is the sub-list for extension extendee
	0,   // [0:104] is the sub-list for field type_name
}

func init() { file_proto_server_cutters_api_proto_init() }
func file_proto_server_cutters_api_proto_init() {
	if File_proto_server_cutters_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_server_cutters_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableHairdressersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableHairdressersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hairdresser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWaitingTimesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWaitingTimesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailablePaymentProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailablePaymentProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCampaignsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCampaignsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWaitingStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWaitingStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanRedeemVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanRedeemVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoucherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoucherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActiveTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActiveTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoricalTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistoricalTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpeningTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timetable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Salon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveServiceTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveProductTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalServiceTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalProductTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadableWaitingTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_cutters_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailablePaymentProviders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_server_cutters_api_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetWaitingTimesRequest_Empty)(nil),
		(*GetWaitingTimesRequest_Location)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_server_cutters_api_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_server_cutters_api_proto_goTypes,
		DependencyIndexes: file_proto_server_cutters_api_proto_depIdxs,
		EnumInfos:         file_proto_server_cutters_api_proto_enumTypes,
		MessageInfos:      file_proto_server_cutters_api_proto_msgTypes,
	}.Build()
	File_proto_server_cutters_api_proto = out.File
	file_proto_server_cutters_api_proto_rawDesc = nil
	file_proto_server_cutters_api_proto_goTypes = nil
	file_proto_server_cutters_api_proto_depIdxs = nil
}
