// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/cutters/salon_api.proto

package cutterspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalonAPIClient is the client API for SalonAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalonAPIClient interface {
	GetSalon(ctx context.Context, in *GetSalonRequest, opts ...grpc.CallOption) (*GetSalonResponse, error)
	ListSalons(ctx context.Context, in *ListSalonsRequest, opts ...grpc.CallOption) (SalonAPI_ListSalonsClient, error)
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type salonAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSalonAPIClient(cc grpc.ClientConnInterface) SalonAPIClient {
	return &salonAPIClient{cc}
}

func (c *salonAPIClient) GetSalon(ctx context.Context, in *GetSalonRequest, opts ...grpc.CallOption) (*GetSalonResponse, error) {
	out := new(GetSalonResponse)
	err := c.cc.Invoke(ctx, "/cutters.SalonAPI/GetSalon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salonAPIClient) ListSalons(ctx context.Context, in *ListSalonsRequest, opts ...grpc.CallOption) (SalonAPI_ListSalonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SalonAPI_ServiceDesc.Streams[0], "/cutters.SalonAPI/ListSalons", opts...)
	if err != nil {
		return nil, err
	}
	x := &salonAPIListSalonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SalonAPI_ListSalonsClient interface {
	Recv() (*ListSalonsResponse, error)
	grpc.ClientStream
}

type salonAPIListSalonsClient struct {
	grpc.ClientStream
}

func (x *salonAPIListSalonsClient) Recv() (*ListSalonsResponse, error) {
	m := new(ListSalonsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *salonAPIClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/cutters.SalonAPI/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalonAPIServer is the server API for SalonAPI service.
// All implementations must embed UnimplementedSalonAPIServer
// for forward compatibility
type SalonAPIServer interface {
	GetSalon(context.Context, *GetSalonRequest) (*GetSalonResponse, error)
	ListSalons(*ListSalonsRequest, SalonAPI_ListSalonsServer) error
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	mustEmbedUnimplementedSalonAPIServer()
}

// UnimplementedSalonAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSalonAPIServer struct {
}

func (UnimplementedSalonAPIServer) GetSalon(context.Context, *GetSalonRequest) (*GetSalonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalon not implemented")
}
func (UnimplementedSalonAPIServer) ListSalons(*ListSalonsRequest, SalonAPI_ListSalonsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSalons not implemented")
}
func (UnimplementedSalonAPIServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedSalonAPIServer) mustEmbedUnimplementedSalonAPIServer() {}

// UnsafeSalonAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalonAPIServer will
// result in compilation errors.
type UnsafeSalonAPIServer interface {
	mustEmbedUnimplementedSalonAPIServer()
}

func RegisterSalonAPIServer(s grpc.ServiceRegistrar, srv SalonAPIServer) {
	s.RegisterService(&SalonAPI_ServiceDesc, srv)
}

func _SalonAPI_GetSalon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalonAPIServer).GetSalon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cutters.SalonAPI/GetSalon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalonAPIServer).GetSalon(ctx, req.(*GetSalonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalonAPI_ListSalons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSalonsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SalonAPIServer).ListSalons(m, &salonAPIListSalonsServer{stream})
}

type SalonAPI_ListSalonsServer interface {
	Send(*ListSalonsResponse) error
	grpc.ServerStream
}

type salonAPIListSalonsServer struct {
	grpc.ServerStream
}

func (x *salonAPIListSalonsServer) Send(m *ListSalonsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SalonAPI_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalonAPIServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cutters.SalonAPI/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalonAPIServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SalonAPI_ServiceDesc is the grpc.ServiceDesc for SalonAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalonAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cutters.SalonAPI",
	HandlerType: (*SalonAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSalon",
			Handler:    _SalonAPI_GetSalon_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _SalonAPI_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSalons",
			Handler:       _SalonAPI_ListSalons_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cutters/salon_api.proto",
}
