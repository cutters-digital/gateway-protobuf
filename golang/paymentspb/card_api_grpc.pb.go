// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/payments/card_api.proto

package paymentspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardAPIClient is the client API for CardAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardAPIClient interface {
	// Create a card on the current user.
	CreateCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	// Update information on a card.
	UpdateCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	// Delete a card. Note: This will not remove any payments done.
	DeleteCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	// List all cards connected to a user.
	ListCards(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (CardAPI_ListCardsClient, error)
}

type cardAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCardAPIClient(cc grpc.ClientConnInterface) CardAPIClient {
	return &cardAPIClient{cc}
}

func (c *cardAPIClient) CreateCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/payments.CardAPI/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardAPIClient) UpdateCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/payments.CardAPI/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardAPIClient) DeleteCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, "/payments.CardAPI/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardAPIClient) ListCards(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (CardAPI_ListCardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardAPI_ServiceDesc.Streams[0], "/payments.CardAPI/ListCards", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardAPIListCardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CardAPI_ListCardsClient interface {
	Recv() (*CardResponse, error)
	grpc.ClientStream
}

type cardAPIListCardsClient struct {
	grpc.ClientStream
}

func (x *cardAPIListCardsClient) Recv() (*CardResponse, error) {
	m := new(CardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CardAPIServer is the server API for CardAPI service.
// All implementations must embed UnimplementedCardAPIServer
// for forward compatibility
type CardAPIServer interface {
	// Create a card on the current user.
	CreateCard(context.Context, *CardRequest) (*CardResponse, error)
	// Update information on a card.
	UpdateCard(context.Context, *CardRequest) (*CardResponse, error)
	// Delete a card. Note: This will not remove any payments done.
	DeleteCard(context.Context, *CardRequest) (*CardResponse, error)
	// List all cards connected to a user.
	ListCards(*CardRequest, CardAPI_ListCardsServer) error
	mustEmbedUnimplementedCardAPIServer()
}

// UnimplementedCardAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCardAPIServer struct {
}

func (UnimplementedCardAPIServer) CreateCard(context.Context, *CardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardAPIServer) UpdateCard(context.Context, *CardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedCardAPIServer) DeleteCard(context.Context, *CardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedCardAPIServer) ListCards(*CardRequest, CardAPI_ListCardsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCards not implemented")
}
func (UnimplementedCardAPIServer) mustEmbedUnimplementedCardAPIServer() {}

// UnsafeCardAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardAPIServer will
// result in compilation errors.
type UnsafeCardAPIServer interface {
	mustEmbedUnimplementedCardAPIServer()
}

func RegisterCardAPIServer(s grpc.ServiceRegistrar, srv CardAPIServer) {
	s.RegisterService(&CardAPI_ServiceDesc, srv)
}

func _CardAPI_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardAPIServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.CardAPI/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardAPIServer).CreateCard(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardAPI_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardAPIServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.CardAPI/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardAPIServer).UpdateCard(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardAPI_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardAPIServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments.CardAPI/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardAPIServer).DeleteCard(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardAPI_ListCards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardAPIServer).ListCards(m, &cardAPIListCardsServer{stream})
}

type CardAPI_ListCardsServer interface {
	Send(*CardResponse) error
	grpc.ServerStream
}

type cardAPIListCardsServer struct {
	grpc.ServerStream
}

func (x *cardAPIListCardsServer) Send(m *CardResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CardAPI_ServiceDesc is the grpc.ServiceDesc for CardAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.CardAPI",
	HandlerType: (*CardAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _CardAPI_CreateCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _CardAPI_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _CardAPI_DeleteCard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCards",
			Handler:       _CardAPI_ListCards_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/payments/card_api.proto",
}
