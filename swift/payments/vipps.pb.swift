// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/payments/vipps.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// VippsPaymentOperation indicates what the App thinks should be the next step of the flow.
public enum Payments_VippsPaymentOperation: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case invalid // = 0
  case initiate // = 1
  case capture // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .invalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalid
    case 1: self = .initiate
    case 2: self = .capture
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .invalid: return 0
    case .initiate: return 1
    case .capture: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Payments_VippsPaymentOperation] = [
    .invalid,
    .initiate,
    .capture,
  ]

}

/// VippsPaymentRequest details the App to Gateway request for initiating and capturing Vipps payments.
public struct Payments_VippsPaymentRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// operation should be Initiate for the first Purchase step, but Capture for the second purchase step.
  public var operation: Payments_VippsPaymentOperation = .invalid

  /// order_id should be empty during the Initiate flow, but populated during the Capture flow.
  public var orderID: String = String()

  /// fall_back url is the App provided deep link for returning the user to the Cutters App after completing the Vipps App flow.
  /// Please see https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#app-switching
  public var fallbackURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// VippsPaymentResponse details the Gateway to App response for the current payment along with the Vipps deep link.
public struct Payments_VippsPaymentResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// order_id should hold the orderID generated by the gateway.
  public var orderID: String = String()

  /// deep_link should hold the Vipps provided deep link to the Vipps app.
  public var deepLink: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "payments"

extension Payments_VippsPaymentOperation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VIPPS_PAYMENT_OPERATION_INVALID"),
    1: .same(proto: "VIPPS_PAYMENT_OPERATION_INITIATE"),
    2: .same(proto: "VIPPS_PAYMENT_OPERATION_CAPTURE"),
  ]
}

extension Payments_VippsPaymentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VippsPaymentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .standard(proto: "order_id"),
    3: .standard(proto: "fallback_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operation) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.fallbackURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operation != .invalid {
      try visitor.visitSingularEnumField(value: self.operation, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    if !self.fallbackURL.isEmpty {
      try visitor.visitSingularStringField(value: self.fallbackURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Payments_VippsPaymentRequest, rhs: Payments_VippsPaymentRequest) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.fallbackURL != rhs.fallbackURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Payments_VippsPaymentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VippsPaymentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "deep_link"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deepLink) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 1)
    }
    if !self.deepLink.isEmpty {
      try visitor.visitSingularStringField(value: self.deepLink, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Payments_VippsPaymentResponse, rhs: Payments_VippsPaymentResponse) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.deepLink != rhs.deepLink {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
