//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/payments/card_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// API for CRUD-operations on payment-cards.
///
/// Usage: instantiate `Payments_CardAPIClient`, then call methods of this protocol to make API calls.
public protocol Payments_CardAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Payments_CardAPIClientInterceptorFactoryProtocol? { get }

  func createCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Payments_CardRequest, Payments_CardResponse>

  func updateCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Payments_CardRequest, Payments_CardResponse>

  func deleteCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Payments_CardRequest, Payments_CardResponse>

  func listCards(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?,
    handler: @escaping (Payments_CardResponse) -> Void
  ) -> ServerStreamingCall<Payments_CardRequest, Payments_CardResponse>
}

extension Payments_CardAPIClientProtocol {
  public var serviceName: String {
    return "payments.CardAPI"
  }

  /// Create a card on the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.createCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCardInterceptors() ?? []
    )
  }

  /// Update information on a card.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.updateCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCardInterceptors() ?? []
    )
  }

  /// Delete a card. Note: This will not remove any payments done.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.deleteCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCardInterceptors() ?? []
    )
  }

  /// List all cards connected to a user.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCards.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listCards(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Payments_CardResponse) -> Void
  ) -> ServerStreamingCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeServerStreamingCall(
      path: Payments_CardAPIClientMetadata.Methods.listCards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCardsInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Payments_CardAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Payments_CardAPINIOClient")
public final class Payments_CardAPIClient: Payments_CardAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Payments_CardAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Payments_CardAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the payments.CardAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Payments_CardAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Payments_CardAPINIOClient: Payments_CardAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Payments_CardAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the payments.CardAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Payments_CardAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// API for CRUD-operations on payment-cards.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Payments_CardAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Payments_CardAPIClientInterceptorFactoryProtocol? { get }

  func makeCreateCardCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Payments_CardRequest, Payments_CardResponse>

  func makeUpdateCardCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Payments_CardRequest, Payments_CardResponse>

  func makeDeleteCardCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Payments_CardRequest, Payments_CardResponse>

  func makeListCardsCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Payments_CardRequest, Payments_CardResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Payments_CardAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Payments_CardAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: Payments_CardAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateCardCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeAsyncUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.createCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCardInterceptors() ?? []
    )
  }

  public func makeUpdateCardCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeAsyncUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.updateCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCardInterceptors() ?? []
    )
  }

  public func makeDeleteCardCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeAsyncUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.deleteCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCardInterceptors() ?? []
    )
  }

  public func makeListCardsCall(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Payments_CardRequest, Payments_CardResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Payments_CardAPIClientMetadata.Methods.listCards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Payments_CardAPIAsyncClientProtocol {
  public func createCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Payments_CardResponse {
    return try await self.performAsyncUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.createCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCardInterceptors() ?? []
    )
  }

  public func updateCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Payments_CardResponse {
    return try await self.performAsyncUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.updateCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCardInterceptors() ?? []
    )
  }

  public func deleteCard(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Payments_CardResponse {
    return try await self.performAsyncUnaryCall(
      path: Payments_CardAPIClientMetadata.Methods.deleteCard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCardInterceptors() ?? []
    )
  }

  public func listCards(
    _ request: Payments_CardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Payments_CardResponse> {
    return self.performAsyncServerStreamingCall(
      path: Payments_CardAPIClientMetadata.Methods.listCards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Payments_CardAPIAsyncClient: Payments_CardAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Payments_CardAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Payments_CardAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Payments_CardAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createCard'.
  func makeCreateCardInterceptors() -> [ClientInterceptor<Payments_CardRequest, Payments_CardResponse>]

  /// - Returns: Interceptors to use when invoking 'updateCard'.
  func makeUpdateCardInterceptors() -> [ClientInterceptor<Payments_CardRequest, Payments_CardResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteCard'.
  func makeDeleteCardInterceptors() -> [ClientInterceptor<Payments_CardRequest, Payments_CardResponse>]

  /// - Returns: Interceptors to use when invoking 'listCards'.
  func makeListCardsInterceptors() -> [ClientInterceptor<Payments_CardRequest, Payments_CardResponse>]
}

public enum Payments_CardAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CardAPI",
    fullName: "payments.CardAPI",
    methods: [
      Payments_CardAPIClientMetadata.Methods.createCard,
      Payments_CardAPIClientMetadata.Methods.updateCard,
      Payments_CardAPIClientMetadata.Methods.deleteCard,
      Payments_CardAPIClientMetadata.Methods.listCards,
    ]
  )

  public enum Methods {
    public static let createCard = GRPCMethodDescriptor(
      name: "CreateCard",
      path: "/payments.CardAPI/CreateCard",
      type: GRPCCallType.unary
    )

    public static let updateCard = GRPCMethodDescriptor(
      name: "UpdateCard",
      path: "/payments.CardAPI/UpdateCard",
      type: GRPCCallType.unary
    )

    public static let deleteCard = GRPCMethodDescriptor(
      name: "DeleteCard",
      path: "/payments.CardAPI/DeleteCard",
      type: GRPCCallType.unary
    )

    public static let listCards = GRPCMethodDescriptor(
      name: "ListCards",
      path: "/payments.CardAPI/ListCards",
      type: GRPCCallType.serverStreaming
    )
  }
}

