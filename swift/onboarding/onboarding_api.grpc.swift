//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/onboarding/onboarding_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// API for getting information about onboarding.
///
/// Usage: instantiate `Onboarding_OnboardingAPIClient`, then call methods of this protocol to make API calls.
public protocol Onboarding_OnboardingAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol? { get }

  func listMessages(
    _ request: Onboarding_ListMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Onboarding_ListMessagesRequest, Onboarding_ListMessagesResponse>
}

extension Onboarding_OnboardingAPIClientProtocol {
  public var serviceName: String {
    return "onboarding.OnboardingAPI"
  }

  /// List all app-messages.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listMessages(
    _ request: Onboarding_ListMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Onboarding_ListMessagesRequest, Onboarding_ListMessagesResponse> {
    return self.makeUnaryCall(
      path: Onboarding_OnboardingAPIClientMetadata.Methods.listMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMessagesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Onboarding_OnboardingAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Onboarding_OnboardingAPINIOClient")
public final class Onboarding_OnboardingAPIClient: Onboarding_OnboardingAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the onboarding.OnboardingAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Onboarding_OnboardingAPINIOClient: Onboarding_OnboardingAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the onboarding.OnboardingAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// API for getting information about onboarding.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Onboarding_OnboardingAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol? { get }

  func makeListMessagesCall(
    _ request: Onboarding_ListMessagesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Onboarding_ListMessagesRequest, Onboarding_ListMessagesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Onboarding_OnboardingAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Onboarding_OnboardingAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeListMessagesCall(
    _ request: Onboarding_ListMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Onboarding_ListMessagesRequest, Onboarding_ListMessagesResponse> {
    return self.makeAsyncUnaryCall(
      path: Onboarding_OnboardingAPIClientMetadata.Methods.listMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMessagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Onboarding_OnboardingAPIAsyncClientProtocol {
  public func listMessages(
    _ request: Onboarding_ListMessagesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Onboarding_ListMessagesResponse {
    return try await self.performAsyncUnaryCall(
      path: Onboarding_OnboardingAPIClientMetadata.Methods.listMessages.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListMessagesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Onboarding_OnboardingAPIAsyncClient: Onboarding_OnboardingAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Onboarding_OnboardingAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Onboarding_OnboardingAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'listMessages'.
  func makeListMessagesInterceptors() -> [ClientInterceptor<Onboarding_ListMessagesRequest, Onboarding_ListMessagesResponse>]
}

public enum Onboarding_OnboardingAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "OnboardingAPI",
    fullName: "onboarding.OnboardingAPI",
    methods: [
      Onboarding_OnboardingAPIClientMetadata.Methods.listMessages,
    ]
  )

  public enum Methods {
    public static let listMessages = GRPCMethodDescriptor(
      name: "ListMessages",
      path: "/onboarding.OnboardingAPI/ListMessages",
      type: GRPCCallType.unary
    )
  }
}

