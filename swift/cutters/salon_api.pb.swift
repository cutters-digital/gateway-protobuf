// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/cutters/salon_api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cutters_Currency: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case invalid // = 0
  case nok // = 1
  case sek // = 2
  case eur // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .invalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalid
    case 1: self = .nok
    case 2: self = .sek
    case 3: self = .eur
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .invalid: return 0
    case .nok: return 1
    case .sek: return 2
    case .eur: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cutters_Currency] = [
    .invalid,
    .nok,
    .sek,
    .eur,
  ]

}

public struct Cutters_GetSalonRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cutters_GetSalonResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Cutters_Error {
    get {return _error ?? Cutters_Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var salon: Cutters_Salon {
    get {return _salon ?? Cutters_Salon()}
    set {_salon = newValue}
  }
  /// Returns true if `salon` has been explicitly set.
  public var hasSalon: Bool {return self._salon != nil}
  /// Clears the value of `salon`. Subsequent reads from it will return its default value.
  public mutating func clearSalon() {self._salon = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _error: Cutters_Error? = nil
  fileprivate var _salon: Cutters_Salon? = nil
}

public struct Cutters_ListSalonsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var empty: SwiftProtobuf.Google_Protobuf_Empty {
    get {return _empty ?? SwiftProtobuf.Google_Protobuf_Empty()}
    set {_empty = newValue}
  }
  /// Returns true if `empty` has been explicitly set.
  public var hasEmpty: Bool {return self._empty != nil}
  /// Clears the value of `empty`. Subsequent reads from it will return its default value.
  public mutating func clearEmpty() {self._empty = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _empty: SwiftProtobuf.Google_Protobuf_Empty? = nil
}

public struct Cutters_ListSalonsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Cutters_Error {
    get {return _error ?? Cutters_Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var salon: Cutters_Salon {
    get {return _salon ?? Cutters_Salon()}
    set {_salon = newValue}
  }
  /// Returns true if `salon` has been explicitly set.
  public var hasSalon: Bool {return self._salon != nil}
  /// Clears the value of `salon`. Subsequent reads from it will return its default value.
  public mutating func clearSalon() {self._salon = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _error: Cutters_Error? = nil
  fileprivate var _salon: Cutters_Salon? = nil
}

public struct Cutters_Salon: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var identity: Cutters_Identity {
    get {return _storage._identity ?? Cutters_Identity()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_uniqueStorage()._identity = nil}

  public var locality: Cutters_Locality {
    get {return _storage._locality ?? Cutters_Locality()}
    set {_uniqueStorage()._locality = newValue}
  }
  /// Returns true if `locality` has been explicitly set.
  public var hasLocality: Bool {return _storage._locality != nil}
  /// Clears the value of `locality`. Subsequent reads from it will return its default value.
  public mutating func clearLocality() {_uniqueStorage()._locality = nil}

  public var shop: Cutters_Shop {
    get {return _storage._shop ?? Cutters_Shop()}
    set {_uniqueStorage()._shop = newValue}
  }
  /// Returns true if `shop` has been explicitly set.
  public var hasShop: Bool {return _storage._shop != nil}
  /// Clears the value of `shop`. Subsequent reads from it will return its default value.
  public mutating func clearShop() {_uniqueStorage()._shop = nil}

  public var schedule: Cutters_Schedule {
    get {return _storage._schedule ?? Cutters_Schedule()}
    set {_uniqueStorage()._schedule = newValue}
  }
  /// Returns true if `schedule` has been explicitly set.
  public var hasSchedule: Bool {return _storage._schedule != nil}
  /// Clears the value of `schedule`. Subsequent reads from it will return its default value.
  public mutating func clearSchedule() {_uniqueStorage()._schedule = nil}

  public var hairdressers: Cutters_Hairdressers {
    get {return _storage._hairdressers ?? Cutters_Hairdressers()}
    set {_uniqueStorage()._hairdressers = newValue}
  }
  /// Returns true if `hairdressers` has been explicitly set.
  public var hasHairdressers: Bool {return _storage._hairdressers != nil}
  /// Clears the value of `hairdressers`. Subsequent reads from it will return its default value.
  public mutating func clearHairdressers() {_uniqueStorage()._hairdressers = nil}

  public var queue: Cutters_Queue {
    get {return _storage._queue ?? Cutters_Queue()}
    set {_uniqueStorage()._queue = newValue}
  }
  /// Returns true if `queue` has been explicitly set.
  public var hasQueue: Bool {return _storage._queue != nil}
  /// Clears the value of `queue`. Subsequent reads from it will return its default value.
  public mutating func clearQueue() {_uniqueStorage()._queue = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cutters_Identity: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cutters_Locality: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var country: String = String()

  public var region: String = String()

  public var city: String = String()

  public var address: String = String()

  public var relativeLocation: String = String()

  public var coordinates: Cutters_Coordinates {
    get {return _coordinates ?? Cutters_Coordinates()}
    set {_coordinates = newValue}
  }
  /// Returns true if `coordinates` has been explicitly set.
  public var hasCoordinates: Bool {return self._coordinates != nil}
  /// Clears the value of `coordinates`. Subsequent reads from it will return its default value.
  public mutating func clearCoordinates() {self._coordinates = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _coordinates: Cutters_Coordinates? = nil
}

public struct Cutters_Coordinates: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var latitude: String = String()

  public var longitude: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cutters_Shop: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var `open`: Bool = false

  public var bookable: Bool = false

  public var paymentProviders: Cutters_PaymentProviders {
    get {return _paymentProviders ?? Cutters_PaymentProviders()}
    set {_paymentProviders = newValue}
  }
  /// Returns true if `paymentProviders` has been explicitly set.
  public var hasPaymentProviders: Bool {return self._paymentProviders != nil}
  /// Clears the value of `paymentProviders`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentProviders() {self._paymentProviders = nil}

  public var currency: Cutters_Currency = .invalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _paymentProviders: Cutters_PaymentProviders? = nil
}

public struct Cutters_PaymentProviders: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var voucher: Bool = false

  public var stripe: Bool = false

  public var vipps: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cutters_Schedule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var regular: Cutters_Regular {
    get {return _regular ?? Cutters_Regular()}
    set {_regular = newValue}
  }
  /// Returns true if `regular` has been explicitly set.
  public var hasRegular: Bool {return self._regular != nil}
  /// Clears the value of `regular`. Subsequent reads from it will return its default value.
  public mutating func clearRegular() {self._regular = nil}

  public var exceptions: [Cutters_Exception] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _regular: Cutters_Regular? = nil
}

public struct Cutters_Regular: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mon: Cutters_Day {
    get {return _storage._mon ?? Cutters_Day()}
    set {_uniqueStorage()._mon = newValue}
  }
  /// Returns true if `mon` has been explicitly set.
  public var hasMon: Bool {return _storage._mon != nil}
  /// Clears the value of `mon`. Subsequent reads from it will return its default value.
  public mutating func clearMon() {_uniqueStorage()._mon = nil}

  public var tue: Cutters_Day {
    get {return _storage._tue ?? Cutters_Day()}
    set {_uniqueStorage()._tue = newValue}
  }
  /// Returns true if `tue` has been explicitly set.
  public var hasTue: Bool {return _storage._tue != nil}
  /// Clears the value of `tue`. Subsequent reads from it will return its default value.
  public mutating func clearTue() {_uniqueStorage()._tue = nil}

  public var wed: Cutters_Day {
    get {return _storage._wed ?? Cutters_Day()}
    set {_uniqueStorage()._wed = newValue}
  }
  /// Returns true if `wed` has been explicitly set.
  public var hasWed: Bool {return _storage._wed != nil}
  /// Clears the value of `wed`. Subsequent reads from it will return its default value.
  public mutating func clearWed() {_uniqueStorage()._wed = nil}

  public var thu: Cutters_Day {
    get {return _storage._thu ?? Cutters_Day()}
    set {_uniqueStorage()._thu = newValue}
  }
  /// Returns true if `thu` has been explicitly set.
  public var hasThu: Bool {return _storage._thu != nil}
  /// Clears the value of `thu`. Subsequent reads from it will return its default value.
  public mutating func clearThu() {_uniqueStorage()._thu = nil}

  public var fri: Cutters_Day {
    get {return _storage._fri ?? Cutters_Day()}
    set {_uniqueStorage()._fri = newValue}
  }
  /// Returns true if `fri` has been explicitly set.
  public var hasFri: Bool {return _storage._fri != nil}
  /// Clears the value of `fri`. Subsequent reads from it will return its default value.
  public mutating func clearFri() {_uniqueStorage()._fri = nil}

  public var sat: Cutters_Day {
    get {return _storage._sat ?? Cutters_Day()}
    set {_uniqueStorage()._sat = newValue}
  }
  /// Returns true if `sat` has been explicitly set.
  public var hasSat: Bool {return _storage._sat != nil}
  /// Clears the value of `sat`. Subsequent reads from it will return its default value.
  public mutating func clearSat() {_uniqueStorage()._sat = nil}

  public var sun: Cutters_Day {
    get {return _storage._sun ?? Cutters_Day()}
    set {_uniqueStorage()._sun = newValue}
  }
  /// Returns true if `sun` has been explicitly set.
  public var hasSun: Bool {return _storage._sun != nil}
  /// Clears the value of `sun`. Subsequent reads from it will return its default value.
  public mutating func clearSun() {_uniqueStorage()._sun = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cutters_Day: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var `open`: Bool = false

  public var from: Cutters_Instant {
    get {return _from ?? Cutters_Instant()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  public var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  public mutating func clearFrom() {self._from = nil}

  public var to: Cutters_Instant {
    get {return _to ?? Cutters_Instant()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  public var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  public mutating func clearTo() {self._to = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _from: Cutters_Instant? = nil
  fileprivate var _to: Cutters_Instant? = nil
}

public struct Cutters_Instant: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hours: Int32 = 0

  public var minutes: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cutters_Exception: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var dateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _dateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_dateTime = newValue}
  }
  /// Returns true if `dateTime` has been explicitly set.
  public var hasDateTime: Bool {return self._dateTime != nil}
  /// Clears the value of `dateTime`. Subsequent reads from it will return its default value.
  public mutating func clearDateTime() {self._dateTime = nil}

  public var day: Cutters_Day {
    get {return _day ?? Cutters_Day()}
    set {_day = newValue}
  }
  /// Returns true if `day` has been explicitly set.
  public var hasDay: Bool {return self._day != nil}
  /// Clears the value of `day`. Subsequent reads from it will return its default value.
  public mutating func clearDay() {self._day = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _day: Cutters_Day? = nil
}

public struct Cutters_Hairdressers: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var available: [Cutters_Hairdresser] = []

  public var anonymous: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cutters_Hairdresser: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var initials: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cutters_Queue: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var waitingTime: Int32 = 0

  public var waiting: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cutters"

extension Cutters_Currency: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CURRENCY_INVALID"),
    1: .same(proto: "CURRENCY_NOK"),
    2: .same(proto: "CURRENCY_SEK"),
    3: .same(proto: "CURRENCY_EUR"),
  ]
}

extension Cutters_GetSalonRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSalonRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_GetSalonRequest, rhs: Cutters_GetSalonRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_GetSalonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSalonResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "salon"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._salon) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._salon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_GetSalonResponse, rhs: Cutters_GetSalonResponse) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._salon != rhs._salon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_ListSalonsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSalonsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "empty"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._empty) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._empty {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_ListSalonsRequest, rhs: Cutters_ListSalonsRequest) -> Bool {
    if lhs._empty != rhs._empty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_ListSalonsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSalonsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "salon"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._salon) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._salon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_ListSalonsResponse, rhs: Cutters_ListSalonsResponse) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._salon != rhs._salon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Salon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Salon"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "locality"),
    3: .same(proto: "shop"),
    4: .same(proto: "schedule"),
    5: .same(proto: "hairdressers"),
    6: .same(proto: "queue"),
  ]

  fileprivate class _StorageClass {
    var _identity: Cutters_Identity? = nil
    var _locality: Cutters_Locality? = nil
    var _shop: Cutters_Shop? = nil
    var _schedule: Cutters_Schedule? = nil
    var _hairdressers: Cutters_Hairdressers? = nil
    var _queue: Cutters_Queue? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _locality = source._locality
      _shop = source._shop
      _schedule = source._schedule
      _hairdressers = source._hairdressers
      _queue = source._queue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._identity) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._locality) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._shop) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._schedule) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._hairdressers) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._queue) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._identity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._locality {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._shop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._schedule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._hairdressers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._queue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Salon, rhs: Cutters_Salon) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identity != rhs_storage._identity {return false}
        if _storage._locality != rhs_storage._locality {return false}
        if _storage._shop != rhs_storage._shop {return false}
        if _storage._schedule != rhs_storage._schedule {return false}
        if _storage._hairdressers != rhs_storage._hairdressers {return false}
        if _storage._queue != rhs_storage._queue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Identity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Identity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Identity, rhs: Cutters_Identity) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Locality: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Locality"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "country"),
    2: .same(proto: "region"),
    3: .same(proto: "city"),
    4: .same(proto: "address"),
    5: .standard(proto: "relative_location"),
    6: .same(proto: "coordinates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.country) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.city) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.relativeLocation) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._coordinates) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.country.isEmpty {
      try visitor.visitSingularStringField(value: self.country, fieldNumber: 1)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 2)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if !self.relativeLocation.isEmpty {
      try visitor.visitSingularStringField(value: self.relativeLocation, fieldNumber: 5)
    }
    try { if let v = self._coordinates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Locality, rhs: Cutters_Locality) -> Bool {
    if lhs.country != rhs.country {return false}
    if lhs.region != rhs.region {return false}
    if lhs.city != rhs.city {return false}
    if lhs.address != rhs.address {return false}
    if lhs.relativeLocation != rhs.relativeLocation {return false}
    if lhs._coordinates != rhs._coordinates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Coordinates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Coordinates"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.longitude) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.latitude.isEmpty {
      try visitor.visitSingularStringField(value: self.latitude, fieldNumber: 1)
    }
    if !self.longitude.isEmpty {
      try visitor.visitSingularStringField(value: self.longitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Coordinates, rhs: Cutters_Coordinates) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Shop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Shop"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "open"),
    2: .same(proto: "bookable"),
    3: .standard(proto: "payment_providers"),
    4: .same(proto: "currency"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.`open`) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.bookable) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._paymentProviders) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.currency) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.`open` != false {
      try visitor.visitSingularBoolField(value: self.`open`, fieldNumber: 1)
    }
    if self.bookable != false {
      try visitor.visitSingularBoolField(value: self.bookable, fieldNumber: 2)
    }
    try { if let v = self._paymentProviders {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.currency != .invalid {
      try visitor.visitSingularEnumField(value: self.currency, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Shop, rhs: Cutters_Shop) -> Bool {
    if lhs.`open` != rhs.`open` {return false}
    if lhs.bookable != rhs.bookable {return false}
    if lhs._paymentProviders != rhs._paymentProviders {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_PaymentProviders: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaymentProviders"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "voucher"),
    2: .same(proto: "stripe"),
    3: .same(proto: "vipps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.voucher) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.stripe) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.vipps) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.voucher != false {
      try visitor.visitSingularBoolField(value: self.voucher, fieldNumber: 1)
    }
    if self.stripe != false {
      try visitor.visitSingularBoolField(value: self.stripe, fieldNumber: 2)
    }
    if self.vipps != false {
      try visitor.visitSingularBoolField(value: self.vipps, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_PaymentProviders, rhs: Cutters_PaymentProviders) -> Bool {
    if lhs.voucher != rhs.voucher {return false}
    if lhs.stripe != rhs.stripe {return false}
    if lhs.vipps != rhs.vipps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Schedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Schedule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "regular"),
    2: .same(proto: "exceptions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._regular) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.exceptions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._regular {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.exceptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.exceptions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Schedule, rhs: Cutters_Schedule) -> Bool {
    if lhs._regular != rhs._regular {return false}
    if lhs.exceptions != rhs.exceptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Regular: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Regular"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mon"),
    2: .same(proto: "tue"),
    3: .same(proto: "wed"),
    4: .same(proto: "thu"),
    5: .same(proto: "fri"),
    6: .same(proto: "sat"),
    7: .same(proto: "sun"),
  ]

  fileprivate class _StorageClass {
    var _mon: Cutters_Day? = nil
    var _tue: Cutters_Day? = nil
    var _wed: Cutters_Day? = nil
    var _thu: Cutters_Day? = nil
    var _fri: Cutters_Day? = nil
    var _sat: Cutters_Day? = nil
    var _sun: Cutters_Day? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _mon = source._mon
      _tue = source._tue
      _wed = source._wed
      _thu = source._thu
      _fri = source._fri
      _sat = source._sat
      _sun = source._sun
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._mon) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._tue) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._wed) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._thu) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._fri) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._sat) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._sun) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._mon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._tue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._wed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._thu {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._fri {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._sat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._sun {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Regular, rhs: Cutters_Regular) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mon != rhs_storage._mon {return false}
        if _storage._tue != rhs_storage._tue {return false}
        if _storage._wed != rhs_storage._wed {return false}
        if _storage._thu != rhs_storage._thu {return false}
        if _storage._fri != rhs_storage._fri {return false}
        if _storage._sat != rhs_storage._sat {return false}
        if _storage._sun != rhs_storage._sun {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Day: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Day"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "open"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.`open`) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.`open` != false {
      try visitor.visitSingularBoolField(value: self.`open`, fieldNumber: 1)
    }
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Day, rhs: Cutters_Day) -> Bool {
    if lhs.`open` != rhs.`open` {return false}
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Instant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Instant"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hours"),
    2: .same(proto: "minutes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.hours) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.minutes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hours != 0 {
      try visitor.visitSingularInt32Field(value: self.hours, fieldNumber: 1)
    }
    if self.minutes != 0 {
      try visitor.visitSingularInt32Field(value: self.minutes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Instant, rhs: Cutters_Instant) -> Bool {
    if lhs.hours != rhs.hours {return false}
    if lhs.minutes != rhs.minutes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Exception: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Exception"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "date_time"),
    2: .same(proto: "day"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dateTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._day) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._day {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Exception, rhs: Cutters_Exception) -> Bool {
    if lhs._dateTime != rhs._dateTime {return false}
    if lhs._day != rhs._day {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Hairdressers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Hairdressers"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "available"),
    2: .same(proto: "anonymous"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.available) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.anonymous) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.available.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.available, fieldNumber: 1)
    }
    if self.anonymous != 0 {
      try visitor.visitSingularInt32Field(value: self.anonymous, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Hairdressers, rhs: Cutters_Hairdressers) -> Bool {
    if lhs.available != rhs.available {return false}
    if lhs.anonymous != rhs.anonymous {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Hairdresser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Hairdresser"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "initials"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.initials) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.initials.isEmpty {
      try visitor.visitSingularStringField(value: self.initials, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Hairdresser, rhs: Cutters_Hairdresser) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.initials != rhs.initials {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cutters_Queue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Queue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "waiting_time"),
    2: .same(proto: "waiting"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.waitingTime) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.waiting) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.waitingTime != 0 {
      try visitor.visitSingularInt32Field(value: self.waitingTime, fieldNumber: 1)
    }
    if self.waiting != 0 {
      try visitor.visitSingularInt32Field(value: self.waiting, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cutters_Queue, rhs: Cutters_Queue) -> Bool {
    if lhs.waitingTime != rhs.waitingTime {return false}
    if lhs.waiting != rhs.waiting {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
