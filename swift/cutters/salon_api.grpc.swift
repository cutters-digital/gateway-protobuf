//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/cutters/salon_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Cutters_SalonAPIClient`, then call methods of this protocol to make API calls.
public protocol Cutters_SalonAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol? { get }

  func getSalon(
    _ request: Cutters_GetSalonRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cutters_GetSalonRequest, Cutters_GetSalonResponse>

  func listSalons(
    _ request: Cutters_ListSalonsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Cutters_ListSalonsResponse) -> Void
  ) -> ServerStreamingCall<Cutters_ListSalonsRequest, Cutters_ListSalonsResponse>

  func echo(
    _ request: Cutters_EchoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cutters_EchoRequest, Cutters_EchoResponse>
}

extension Cutters_SalonAPIClientProtocol {
  public var serviceName: String {
    return "cutters.SalonAPI"
  }

  /// Unary call to GetSalon
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSalon.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSalon(
    _ request: Cutters_GetSalonRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cutters_GetSalonRequest, Cutters_GetSalonResponse> {
    return self.makeUnaryCall(
      path: Cutters_SalonAPIClientMetadata.Methods.getSalon.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSalonInterceptors() ?? []
    )
  }

  /// Server streaming call to ListSalons
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSalons.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listSalons(
    _ request: Cutters_ListSalonsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Cutters_ListSalonsResponse) -> Void
  ) -> ServerStreamingCall<Cutters_ListSalonsRequest, Cutters_ListSalonsResponse> {
    return self.makeServerStreamingCall(
      path: Cutters_SalonAPIClientMetadata.Methods.listSalons.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSalonsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Echo
  ///
  /// - Parameters:
  ///   - request: Request to send to Echo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func echo(
    _ request: Cutters_EchoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cutters_EchoRequest, Cutters_EchoResponse> {
    return self.makeUnaryCall(
      path: Cutters_SalonAPIClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cutters_SalonAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cutters_SalonAPINIOClient")
public final class Cutters_SalonAPIClient: Cutters_SalonAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cutters.SalonAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Cutters_SalonAPINIOClient: Cutters_SalonAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the cutters.SalonAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Cutters_SalonAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol? { get }

  func makeGetSalonCall(
    _ request: Cutters_GetSalonRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cutters_GetSalonRequest, Cutters_GetSalonResponse>

  func makeListSalonsCall(
    _ request: Cutters_ListSalonsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Cutters_ListSalonsRequest, Cutters_ListSalonsResponse>

  func makeEchoCall(
    _ request: Cutters_EchoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cutters_EchoRequest, Cutters_EchoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cutters_SalonAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Cutters_SalonAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetSalonCall(
    _ request: Cutters_GetSalonRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cutters_GetSalonRequest, Cutters_GetSalonResponse> {
    return self.makeAsyncUnaryCall(
      path: Cutters_SalonAPIClientMetadata.Methods.getSalon.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSalonInterceptors() ?? []
    )
  }

  public func makeListSalonsCall(
    _ request: Cutters_ListSalonsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Cutters_ListSalonsRequest, Cutters_ListSalonsResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Cutters_SalonAPIClientMetadata.Methods.listSalons.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSalonsInterceptors() ?? []
    )
  }

  public func makeEchoCall(
    _ request: Cutters_EchoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cutters_EchoRequest, Cutters_EchoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cutters_SalonAPIClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cutters_SalonAPIAsyncClientProtocol {
  public func getSalon(
    _ request: Cutters_GetSalonRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cutters_GetSalonResponse {
    return try await self.performAsyncUnaryCall(
      path: Cutters_SalonAPIClientMetadata.Methods.getSalon.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSalonInterceptors() ?? []
    )
  }

  public func listSalons(
    _ request: Cutters_ListSalonsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Cutters_ListSalonsResponse> {
    return self.performAsyncServerStreamingCall(
      path: Cutters_SalonAPIClientMetadata.Methods.listSalons.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSalonsInterceptors() ?? []
    )
  }

  public func echo(
    _ request: Cutters_EchoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cutters_EchoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cutters_SalonAPIClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Cutters_SalonAPIAsyncClient: Cutters_SalonAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cutters_SalonAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Cutters_SalonAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getSalon'.
  func makeGetSalonInterceptors() -> [ClientInterceptor<Cutters_GetSalonRequest, Cutters_GetSalonResponse>]

  /// - Returns: Interceptors to use when invoking 'listSalons'.
  func makeListSalonsInterceptors() -> [ClientInterceptor<Cutters_ListSalonsRequest, Cutters_ListSalonsResponse>]

  /// - Returns: Interceptors to use when invoking 'echo'.
  func makeEchoInterceptors() -> [ClientInterceptor<Cutters_EchoRequest, Cutters_EchoResponse>]
}

public enum Cutters_SalonAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SalonAPI",
    fullName: "cutters.SalonAPI",
    methods: [
      Cutters_SalonAPIClientMetadata.Methods.getSalon,
      Cutters_SalonAPIClientMetadata.Methods.listSalons,
      Cutters_SalonAPIClientMetadata.Methods.echo,
    ]
  )

  public enum Methods {
    public static let getSalon = GRPCMethodDescriptor(
      name: "GetSalon",
      path: "/cutters.SalonAPI/GetSalon",
      type: GRPCCallType.unary
    )

    public static let listSalons = GRPCMethodDescriptor(
      name: "ListSalons",
      path: "/cutters.SalonAPI/ListSalons",
      type: GRPCCallType.serverStreaming
    )

    public static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/cutters.SalonAPI/Echo",
      type: GRPCCallType.unary
    )
  }
}

