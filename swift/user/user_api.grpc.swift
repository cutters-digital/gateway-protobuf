//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/user/user_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// API for CRUD-operations on users.
///
/// Usage: instantiate `User_UserAPIClient`, then call methods of this protocol to make API calls.
public protocol User_UserAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: User_UserAPIClientInterceptorFactoryProtocol? { get }

  func createUser(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_UserRequest, User_UserResponse>

  func getUser(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_UserRequest, User_UserResponse>

  func updateUser(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_UserRequest, User_UserResponse>

  func deleteUser(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_UserRequest, User_UserResponse>

  func updateUserNotification(
    _ request: User_UpdateUserNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<User_UpdateUserNotificationRequest, User_UpdateUserNotificationResponse>
}

extension User_UserAPIClientProtocol {
  public var serviceName: String {
    return "user.UserAPI"
  }

  /// Create a user.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeUnaryCall(
      path: User_UserAPIClientMetadata.Methods.createUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserInterceptors() ?? []
    )
  }

  /// Get the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeUnaryCall(
      path: User_UserAPIClientMetadata.Methods.getUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterceptors() ?? []
    )
  }

  /// Update information on the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeUnaryCall(
      path: User_UserAPIClientMetadata.Methods.updateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }

  /// Delete the current.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeUnaryCall(
      path: User_UserAPIClientMetadata.Methods.deleteUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserInterceptors() ?? []
    )
  }

  /// Update notification token on the current user.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateUserNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateUserNotification(
    _ request: User_UpdateUserNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<User_UpdateUserNotificationRequest, User_UpdateUserNotificationResponse> {
    return self.makeUnaryCall(
      path: User_UserAPIClientMetadata.Methods.updateUserNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserNotificationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension User_UserAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "User_UserAPINIOClient")
public final class User_UserAPIClient: User_UserAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: User_UserAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: User_UserAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the user.UserAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: User_UserAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct User_UserAPINIOClient: User_UserAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: User_UserAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the user.UserAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: User_UserAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// API for CRUD-operations on users.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol User_UserAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: User_UserAPIClientInterceptorFactoryProtocol? { get }

  func makeCreateUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse>

  func makeGetUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse>

  func makeUpdateUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse>

  func makeDeleteUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse>

  func makeUpdateUserNotificationCall(
    _ request: User_UpdateUserNotificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<User_UpdateUserNotificationRequest, User_UpdateUserNotificationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension User_UserAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return User_UserAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: User_UserAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.createUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserInterceptors() ?? []
    )
  }

  public func makeGetUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.getUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterceptors() ?? []
    )
  }

  public func makeUpdateUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.updateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }

  public func makeDeleteUserCall(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<User_UserRequest, User_UserResponse> {
    return self.makeAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.deleteUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserInterceptors() ?? []
    )
  }

  public func makeUpdateUserNotificationCall(
    _ request: User_UpdateUserNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<User_UpdateUserNotificationRequest, User_UpdateUserNotificationResponse> {
    return self.makeAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.updateUserNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension User_UserAPIAsyncClientProtocol {
  public func createUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> User_UserResponse {
    return try await self.performAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.createUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserInterceptors() ?? []
    )
  }

  public func getUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> User_UserResponse {
    return try await self.performAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.getUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetUserInterceptors() ?? []
    )
  }

  public func updateUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> User_UserResponse {
    return try await self.performAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.updateUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }

  public func deleteUser(
    _ request: User_UserRequest,
    callOptions: CallOptions? = nil
  ) async throws -> User_UserResponse {
    return try await self.performAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.deleteUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserInterceptors() ?? []
    )
  }

  public func updateUserNotification(
    _ request: User_UpdateUserNotificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> User_UpdateUserNotificationResponse {
    return try await self.performAsyncUnaryCall(
      path: User_UserAPIClientMetadata.Methods.updateUserNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct User_UserAPIAsyncClient: User_UserAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: User_UserAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: User_UserAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol User_UserAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createUser'.
  func makeCreateUserInterceptors() -> [ClientInterceptor<User_UserRequest, User_UserResponse>]

  /// - Returns: Interceptors to use when invoking 'getUser'.
  func makeGetUserInterceptors() -> [ClientInterceptor<User_UserRequest, User_UserResponse>]

  /// - Returns: Interceptors to use when invoking 'updateUser'.
  func makeUpdateUserInterceptors() -> [ClientInterceptor<User_UserRequest, User_UserResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteUser'.
  func makeDeleteUserInterceptors() -> [ClientInterceptor<User_UserRequest, User_UserResponse>]

  /// - Returns: Interceptors to use when invoking 'updateUserNotification'.
  func makeUpdateUserNotificationInterceptors() -> [ClientInterceptor<User_UpdateUserNotificationRequest, User_UpdateUserNotificationResponse>]
}

public enum User_UserAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "UserAPI",
    fullName: "user.UserAPI",
    methods: [
      User_UserAPIClientMetadata.Methods.createUser,
      User_UserAPIClientMetadata.Methods.getUser,
      User_UserAPIClientMetadata.Methods.updateUser,
      User_UserAPIClientMetadata.Methods.deleteUser,
      User_UserAPIClientMetadata.Methods.updateUserNotification,
    ]
  )

  public enum Methods {
    public static let createUser = GRPCMethodDescriptor(
      name: "CreateUser",
      path: "/user.UserAPI/CreateUser",
      type: GRPCCallType.unary
    )

    public static let getUser = GRPCMethodDescriptor(
      name: "GetUser",
      path: "/user.UserAPI/GetUser",
      type: GRPCCallType.unary
    )

    public static let updateUser = GRPCMethodDescriptor(
      name: "UpdateUser",
      path: "/user.UserAPI/UpdateUser",
      type: GRPCCallType.unary
    )

    public static let deleteUser = GRPCMethodDescriptor(
      name: "DeleteUser",
      path: "/user.UserAPI/DeleteUser",
      type: GRPCCallType.unary
    )

    public static let updateUserNotification = GRPCMethodDescriptor(
      name: "UpdateUserNotification",
      path: "/user.UserAPI/UpdateUserNotification",
      type: GRPCCallType.unary
    )
  }
}

