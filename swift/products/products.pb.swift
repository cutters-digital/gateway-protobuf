// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/products/products.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ActiveLineItem represents line item for a product in an active purchase.
public struct Products_ActiveLineItem: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var registeredTime: Utils_Timestamp {
    get {return _registeredTime ?? Utils_Timestamp()}
    set {_registeredTime = newValue}
  }
  /// Returns true if `registeredTime` has been explicitly set.
  public var hasRegisteredTime: Bool {return self._registeredTime != nil}
  /// Clears the value of `registeredTime`. Subsequent reads from it will return its default value.
  public mutating func clearRegisteredTime() {self._registeredTime = nil}

  public var paymentTime: Utils_Timestamp {
    get {return _paymentTime ?? Utils_Timestamp()}
    set {_paymentTime = newValue}
  }
  /// Returns true if `paymentTime` has been explicitly set.
  public var hasPaymentTime: Bool {return self._paymentTime != nil}
  /// Clears the value of `paymentTime`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentTime() {self._paymentTime = nil}

  public var startedTime: Utils_Timestamp {
    get {return _startedTime ?? Utils_Timestamp()}
    set {_startedTime = newValue}
  }
  /// Returns true if `startedTime` has been explicitly set.
  public var hasStartedTime: Bool {return self._startedTime != nil}
  /// Clears the value of `startedTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartedTime() {self._startedTime = nil}

  public var completedTime: Utils_Timestamp {
    get {return _completedTime ?? Utils_Timestamp()}
    set {_completedTime = newValue}
  }
  /// Returns true if `completedTime` has been explicitly set.
  public var hasCompletedTime: Bool {return self._completedTime != nil}
  /// Clears the value of `completedTime`. Subsequent reads from it will return its default value.
  public mutating func clearCompletedTime() {self._completedTime = nil}

  public var product: Products_Product {
    get {return _product ?? Products_Product()}
    set {_product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return self._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {self._product = nil}

  public var quantity: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _registeredTime: Utils_Timestamp? = nil
  fileprivate var _paymentTime: Utils_Timestamp? = nil
  fileprivate var _startedTime: Utils_Timestamp? = nil
  fileprivate var _completedTime: Utils_Timestamp? = nil
  fileprivate var _product: Products_Product? = nil
}

/// HistoricLineItem represents line item for a product in a historical purchase.
public struct Products_HistoricalLineItem: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var registeredTime: Utils_Timestamp {
    get {return _storage._registeredTime ?? Utils_Timestamp()}
    set {_uniqueStorage()._registeredTime = newValue}
  }
  /// Returns true if `registeredTime` has been explicitly set.
  public var hasRegisteredTime: Bool {return _storage._registeredTime != nil}
  /// Clears the value of `registeredTime`. Subsequent reads from it will return its default value.
  public mutating func clearRegisteredTime() {_uniqueStorage()._registeredTime = nil}

  public var paymentTime: Utils_Timestamp {
    get {return _storage._paymentTime ?? Utils_Timestamp()}
    set {_uniqueStorage()._paymentTime = newValue}
  }
  /// Returns true if `paymentTime` has been explicitly set.
  public var hasPaymentTime: Bool {return _storage._paymentTime != nil}
  /// Clears the value of `paymentTime`. Subsequent reads from it will return its default value.
  public mutating func clearPaymentTime() {_uniqueStorage()._paymentTime = nil}

  public var startedTime: Utils_Timestamp {
    get {return _storage._startedTime ?? Utils_Timestamp()}
    set {_uniqueStorage()._startedTime = newValue}
  }
  /// Returns true if `startedTime` has been explicitly set.
  public var hasStartedTime: Bool {return _storage._startedTime != nil}
  /// Clears the value of `startedTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartedTime() {_uniqueStorage()._startedTime = nil}

  public var completedTime: Utils_Timestamp {
    get {return _storage._completedTime ?? Utils_Timestamp()}
    set {_uniqueStorage()._completedTime = newValue}
  }
  /// Returns true if `completedTime` has been explicitly set.
  public var hasCompletedTime: Bool {return _storage._completedTime != nil}
  /// Clears the value of `completedTime`. Subsequent reads from it will return its default value.
  public mutating func clearCompletedTime() {_uniqueStorage()._completedTime = nil}

  public var product: Products_Product {
    get {return _storage._product ?? Products_Product()}
    set {_uniqueStorage()._product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return _storage._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {_uniqueStorage()._product = nil}

  public var quantity: UInt32 {
    get {return _storage._quantity}
    set {_uniqueStorage()._quantity = newValue}
  }

  public var ratingURL: String {
    get {return _storage._ratingURL}
    set {_uniqueStorage()._ratingURL = newValue}
  }

  public var rating: Int32 {
    get {return _storage._rating}
    set {_uniqueStorage()._rating = newValue}
  }

  public var ratingAvailable: Bool {
    get {return _storage._ratingAvailable}
    set {_uniqueStorage()._ratingAvailable = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Product contains information about a product.
public struct Products_Product: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id is the unique identifier of a product.
  public var id: String = String()

  /// price is the price of the product. A Salon is required to be able to deduct the price.
  public var price: Money_Price {
    get {return _price ?? Money_Price()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  /// name is a short description of the product. It may be localized.
  public var name: String = String()

  /// description is a longer description of the product. It may be localized.
  public var description_p: String = String()

  /// imageUrl is a url to a image of the product. It may be localized.
  public var imageURL: String = String()

  /// capacity is a description of the volume/quantity/mass of a product, such as "300 ml" or "1 liter" or "75 grams".  It may be localized.
  public var capacity: String = String()

  /// description_url points to the product's webpage. Should be localized.
  public var descriptionURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _price: Money_Price? = nil
}

/// ProductRequest describes the requesting of a product.
public struct Products_ProductRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the requested product.
  public var id: String = String()

  /// How many of the same product to request.
  public var quantity: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Service contains information about a service.
public struct Products_Service: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id is the unique identifier of a service.
  public var id: String = String()

  /// price is the price of the service. A Salon is required to be able to deduct the price.
  public var price: Money_Price {
    get {return _price ?? Money_Price()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  /// name is a short description of the service. It may be localized.
  public var name: String = String()

  /// description is a longer description of the service. It may be localized.
  public var description_p: String = String()

  /// imageUrl is a url to a image of the service. It may be localized.
  public var imageURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _price: Money_Price? = nil
}

/// ServiceRequest describes the requesting of a service.
public struct Products_ServiceRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the requested service.
  public var id: String = String()

  /// How many of the same service to request.
  public var quantity: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "products"

extension Products_ActiveLineItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActiveLineItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "registered_time"),
    2: .standard(proto: "payment_time"),
    3: .standard(proto: "started_time"),
    4: .standard(proto: "completed_time"),
    5: .same(proto: "product"),
    6: .same(proto: "quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._registeredTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._paymentTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startedTime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._completedTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._product) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.quantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._registeredTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._paymentTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._startedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._completedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._product {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.quantity != 0 {
      try visitor.visitSingularUInt32Field(value: self.quantity, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Products_ActiveLineItem, rhs: Products_ActiveLineItem) -> Bool {
    if lhs._registeredTime != rhs._registeredTime {return false}
    if lhs._paymentTime != rhs._paymentTime {return false}
    if lhs._startedTime != rhs._startedTime {return false}
    if lhs._completedTime != rhs._completedTime {return false}
    if lhs._product != rhs._product {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Products_HistoricalLineItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HistoricalLineItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "registered_time"),
    2: .standard(proto: "payment_time"),
    3: .standard(proto: "started_time"),
    4: .standard(proto: "completed_time"),
    5: .same(proto: "product"),
    6: .same(proto: "quantity"),
    7: .standard(proto: "rating_url"),
    8: .same(proto: "rating"),
    9: .standard(proto: "rating_available"),
  ]

  fileprivate class _StorageClass {
    var _registeredTime: Utils_Timestamp? = nil
    var _paymentTime: Utils_Timestamp? = nil
    var _startedTime: Utils_Timestamp? = nil
    var _completedTime: Utils_Timestamp? = nil
    var _product: Products_Product? = nil
    var _quantity: UInt32 = 0
    var _ratingURL: String = String()
    var _rating: Int32 = 0
    var _ratingAvailable: Bool = false

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _registeredTime = source._registeredTime
      _paymentTime = source._paymentTime
      _startedTime = source._startedTime
      _completedTime = source._completedTime
      _product = source._product
      _quantity = source._quantity
      _ratingURL = source._ratingURL
      _rating = source._rating
      _ratingAvailable = source._ratingAvailable
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._registeredTime) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._paymentTime) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._startedTime) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._completedTime) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._product) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._quantity) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._ratingURL) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._rating) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._ratingAvailable) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._registeredTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._paymentTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._startedTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._completedTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._quantity != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._quantity, fieldNumber: 6)
      }
      if !_storage._ratingURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ratingURL, fieldNumber: 7)
      }
      if _storage._rating != 0 {
        try visitor.visitSingularInt32Field(value: _storage._rating, fieldNumber: 8)
      }
      if _storage._ratingAvailable != false {
        try visitor.visitSingularBoolField(value: _storage._ratingAvailable, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Products_HistoricalLineItem, rhs: Products_HistoricalLineItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._registeredTime != rhs_storage._registeredTime {return false}
        if _storage._paymentTime != rhs_storage._paymentTime {return false}
        if _storage._startedTime != rhs_storage._startedTime {return false}
        if _storage._completedTime != rhs_storage._completedTime {return false}
        if _storage._product != rhs_storage._product {return false}
        if _storage._quantity != rhs_storage._quantity {return false}
        if _storage._ratingURL != rhs_storage._ratingURL {return false}
        if _storage._rating != rhs_storage._rating {return false}
        if _storage._ratingAvailable != rhs_storage._ratingAvailable {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Products_Product: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Product"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "price"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .standard(proto: "image_url"),
    6: .same(proto: "capacity"),
    7: .standard(proto: "description_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._price) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.capacity) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.descriptionURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 5)
    }
    if !self.capacity.isEmpty {
      try visitor.visitSingularStringField(value: self.capacity, fieldNumber: 6)
    }
    if !self.descriptionURL.isEmpty {
      try visitor.visitSingularStringField(value: self.descriptionURL, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Products_Product, rhs: Products_Product) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._price != rhs._price {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.capacity != rhs.capacity {return false}
    if lhs.descriptionURL != rhs.descriptionURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Products_ProductRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.quantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularUInt32Field(value: self.quantity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Products_ProductRequest, rhs: Products_ProductRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Products_Service: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Service"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "price"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .standard(proto: "image_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._price) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Products_Service, rhs: Products_Service) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._price != rhs._price {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Products_ServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.quantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularUInt32Field(value: self.quantity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Products_ServiceRequest, rhs: Products_ServiceRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
