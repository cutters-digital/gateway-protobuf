//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/rest/rest_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// API for calls that go through a REST-proxy for REST-specific authentication, such as HMAC.
///
/// Usage: instantiate `Rest_RestAPIClient`, then call methods of this protocol to make API calls.
public protocol Rest_RestAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Rest_RestAPIClientInterceptorFactoryProtocol? { get }

  func notification(
    _ request: Rest_NotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rest_NotificationRequest, Rest_NotificationResponse>

  func updateService(
    _ request: Rest_UpdateServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rest_UpdateServiceRequest, Rest_UpdateServiceResponse>

  func voucherNotification(
    _ request: Rest_VoucherNotificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rest_VoucherNotificationRequest, Rest_VoucherNotificationResponse>
}

extension Rest_RestAPIClientProtocol {
  public var serviceName: String {
    return "rest.RestAPI"
  }

  /// Send a notification to a specific user.
  ///
  /// - Parameters:
  ///   - request: Request to send to Notification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func notification(
    _ request: Rest_NotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rest_NotificationRequest, Rest_NotificationResponse> {
    return self.makeUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.notification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotificationInterceptors() ?? []
    )
  }

  /// Send customer-notification and update a service.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateService(
    _ request: Rest_UpdateServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rest_UpdateServiceRequest, Rest_UpdateServiceResponse> {
    return self.makeUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.updateService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateServiceInterceptors() ?? []
    )
  }

  /// Send a voucher-notification to a specific user.
  ///
  /// - Parameters:
  ///   - request: Request to send to VoucherNotification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func voucherNotification(
    _ request: Rest_VoucherNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rest_VoucherNotificationRequest, Rest_VoucherNotificationResponse> {
    return self.makeUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.voucherNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoucherNotificationInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Rest_RestAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Rest_RestAPINIOClient")
public final class Rest_RestAPIClient: Rest_RestAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Rest_RestAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Rest_RestAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the rest.RestAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rest_RestAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Rest_RestAPINIOClient: Rest_RestAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Rest_RestAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the rest.RestAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rest_RestAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// API for calls that go through a REST-proxy for REST-specific authentication, such as HMAC.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Rest_RestAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Rest_RestAPIClientInterceptorFactoryProtocol? { get }

  func makeNotificationCall(
    _ request: Rest_NotificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rest_NotificationRequest, Rest_NotificationResponse>

  func makeUpdateServiceCall(
    _ request: Rest_UpdateServiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rest_UpdateServiceRequest, Rest_UpdateServiceResponse>

  func makeVoucherNotificationCall(
    _ request: Rest_VoucherNotificationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Rest_VoucherNotificationRequest, Rest_VoucherNotificationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rest_RestAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Rest_RestAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: Rest_RestAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeNotificationCall(
    _ request: Rest_NotificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rest_NotificationRequest, Rest_NotificationResponse> {
    return self.makeAsyncUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.notification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotificationInterceptors() ?? []
    )
  }

  public func makeUpdateServiceCall(
    _ request: Rest_UpdateServiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rest_UpdateServiceRequest, Rest_UpdateServiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.updateService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateServiceInterceptors() ?? []
    )
  }

  public func makeVoucherNotificationCall(
    _ request: Rest_VoucherNotificationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Rest_VoucherNotificationRequest, Rest_VoucherNotificationResponse> {
    return self.makeAsyncUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.voucherNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoucherNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Rest_RestAPIAsyncClientProtocol {
  public func notification(
    _ request: Rest_NotificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rest_NotificationResponse {
    return try await self.performAsyncUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.notification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotificationInterceptors() ?? []
    )
  }

  public func updateService(
    _ request: Rest_UpdateServiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rest_UpdateServiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.updateService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateServiceInterceptors() ?? []
    )
  }

  public func voucherNotification(
    _ request: Rest_VoucherNotificationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Rest_VoucherNotificationResponse {
    return try await self.performAsyncUnaryCall(
      path: Rest_RestAPIClientMetadata.Methods.voucherNotification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoucherNotificationInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Rest_RestAPIAsyncClient: Rest_RestAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Rest_RestAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rest_RestAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Rest_RestAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'notification'.
  func makeNotificationInterceptors() -> [ClientInterceptor<Rest_NotificationRequest, Rest_NotificationResponse>]

  /// - Returns: Interceptors to use when invoking 'updateService'.
  func makeUpdateServiceInterceptors() -> [ClientInterceptor<Rest_UpdateServiceRequest, Rest_UpdateServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'voucherNotification'.
  func makeVoucherNotificationInterceptors() -> [ClientInterceptor<Rest_VoucherNotificationRequest, Rest_VoucherNotificationResponse>]
}

public enum Rest_RestAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RestAPI",
    fullName: "rest.RestAPI",
    methods: [
      Rest_RestAPIClientMetadata.Methods.notification,
      Rest_RestAPIClientMetadata.Methods.updateService,
      Rest_RestAPIClientMetadata.Methods.voucherNotification,
    ]
  )

  public enum Methods {
    public static let notification = GRPCMethodDescriptor(
      name: "Notification",
      path: "/rest.RestAPI/Notification",
      type: GRPCCallType.unary
    )

    public static let updateService = GRPCMethodDescriptor(
      name: "UpdateService",
      path: "/rest.RestAPI/UpdateService",
      type: GRPCCallType.unary
    )

    public static let voucherNotification = GRPCMethodDescriptor(
      name: "VoucherNotification",
      path: "/rest.RestAPI/VoucherNotification",
      type: GRPCCallType.unary
    )
  }
}

