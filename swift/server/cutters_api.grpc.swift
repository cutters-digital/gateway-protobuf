//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/server/cutters_api.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// API for getting status about salons, or making bookings.
///
/// Usage: instantiate `Server_CuttersAPIClient`, then call methods of this protocol to make API calls.
public protocol Server_CuttersAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol? { get }

  func getWaitingTimes(
    _ request: Server_GetWaitingTimesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Server_GetWaitingTimesResponse) -> Void
  ) -> ServerStreamingCall<Server_GetWaitingTimesRequest, Server_GetWaitingTimesResponse>

  func getSalon(
    _ request: Server_GetSalonRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_GetSalonRequest, Server_GetSalonResponse>

  func book(
    _ request: Server_BookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_BookRequest, Server_BookResponse>

  func purchase(
    _ request: Server_PurchaseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_PurchaseRequest, Server_PurchaseResponse>

  func getAvailablePaymentProviders(
    _ request: Server_GetAvailablePaymentProvidersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_GetAvailablePaymentProvidersRequest, Server_GetAvailablePaymentProvidersResponse>

  func getPrice(
    _ request: Server_GetPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_GetPriceRequest, Server_GetPriceResponse>

  func getCampaigns(
    _ request: Server_GetCampaignsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_GetCampaignsRequest, Server_GetCampaignsResponse>

  func getServices(
    _ request: Server_GetServicesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Server_GetServicesResponse) -> Void
  ) -> ServerStreamingCall<Server_GetServicesRequest, Server_GetServicesResponse>

  func getProducts(
    _ request: Server_GetProductsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Server_GetProductsResponse) -> Void
  ) -> ServerStreamingCall<Server_GetProductsRequest, Server_GetProductsResponse>

  func getWaitingStatus(
    _ request: Server_GetWaitingStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_GetWaitingStatusRequest, Server_GetWaitingStatusResponse>

  func listTransactions(
    _ request: Server_ListTransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_ListTransactionsRequest, Server_ListTransactionsResponse>

  func canRedeemVoucher(
    _ request: Server_CanRedeemVoucherRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_CanRedeemVoucherRequest, Server_CanRedeemVoucherResponse>

  func createVoucher(
    _ request: Server_CreateVoucherRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_CreateVoucherRequest, Server_CreateVoucherResponse>

  func getReferralStatus(
    _ request: Server_GetReferralStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_GetReferralStatusRequest, Server_GetReferralStatusResponse>

  func cancelService(
    _ request: Server_CancelServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_CancelServiceRequest, Server_CancelServiceResponse>

  func remoteLog(
    _ request: Server_RemoteLogRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_RemoteLogRequest, Server_RemoteLogResponse>

  func timeout(
    _ request: Server_TimeoutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_TimeoutRequest, Server_TimeoutResponse>

  func listActiveTransactions(
    _ request: Server_ListActiveTransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_ListActiveTransactionsRequest, Server_ListActiveTransactionsResponse>

  func listHistoricalTransactions(
    _ request: Server_ListHistoricalTransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_ListHistoricalTransactionsRequest, Server_ListHistoricalTransactionsResponse>

  func getAvailableHairdressers(
    _ request: Server_AvailableHairdressersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Server_AvailableHairdressersRequest, Server_AvailableHairdressersResponse>
}

extension Server_CuttersAPIClientProtocol {
  public var serviceName: String {
    return "server.CuttersAPI"
  }

  /// Returns all the salons with estimated waiting times.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWaitingTimes.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getWaitingTimes(
    _ request: Server_GetWaitingTimesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Server_GetWaitingTimesResponse) -> Void
  ) -> ServerStreamingCall<Server_GetWaitingTimesRequest, Server_GetWaitingTimesResponse> {
    return self.makeServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getWaitingTimes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaitingTimesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Returns a salon with updated waiting-times.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSalon.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSalon(
    _ request: Server_GetSalonRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_GetSalonRequest, Server_GetSalonResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getSalon.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSalonInterceptors() ?? []
    )
  }

  /// Book a haircut.
  ///
  /// - Parameters:
  ///   - request: Request to send to Book.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func book(
    _ request: Server_BookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_BookRequest, Server_BookResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.book.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBookInterceptors() ?? []
    )
  }

  /// Purchase a certain number of haircuts and/or products.
  ///
  /// - Parameters:
  ///   - request: Request to send to Purchase.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func purchase(
    _ request: Server_PurchaseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_PurchaseRequest, Server_PurchaseResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.purchase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurchaseInterceptors() ?? []
    )
  }

  /// Get the payment-providers that are available to the app for the given user.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAvailablePaymentProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAvailablePaymentProviders(
    _ request: Server_GetAvailablePaymentProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_GetAvailablePaymentProvidersRequest, Server_GetAvailablePaymentProvidersResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getAvailablePaymentProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAvailablePaymentProvidersInterceptors() ?? []
    )
  }

  /// Get the total price for the requested items.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPrice(
    _ request: Server_GetPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_GetPriceRequest, Server_GetPriceResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPriceInterceptors() ?? []
    )
  }

  /// Get all active campaigns/sales.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCampaigns.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCampaigns(
    _ request: Server_GetCampaignsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_GetCampaignsRequest, Server_GetCampaignsResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getCampaigns.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCampaignsInterceptors() ?? []
    )
  }

  /// Get all the services available for a salon. The best-matching locale will be used.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServices.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getServices(
    _ request: Server_GetServicesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Server_GetServicesResponse) -> Void
  ) -> ServerStreamingCall<Server_GetServicesRequest, Server_GetServicesResponse> {
    return self.makeServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getServices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServicesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get all the products available for a salon. The best-matching locale will be used.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProducts.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getProducts(
    _ request: Server_GetProductsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Server_GetProductsResponse) -> Void
  ) -> ServerStreamingCall<Server_GetProductsRequest, Server_GetProductsResponse> {
    return self.makeServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getProducts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProductsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the current waiting-status.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWaitingStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getWaitingStatus(
    _ request: Server_GetWaitingStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_GetWaitingStatusRequest, Server_GetWaitingStatusResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getWaitingStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaitingStatusInterceptors() ?? []
    )
  }

  /// List all current and historic purchases. Replaced by ListActiveTransactions and ListHistoricalTransactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTransactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTransactions(
    _ request: Server_ListTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_ListTransactionsRequest, Server_ListTransactionsResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? []
    )
  }

  /// Checks if a voucher can be redeemed.
  ///
  /// - Parameters:
  ///   - request: Request to send to CanRedeemVoucher.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func canRedeemVoucher(
    _ request: Server_CanRedeemVoucherRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_CanRedeemVoucherRequest, Server_CanRedeemVoucherResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.canRedeemVoucher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanRedeemVoucherInterceptors() ?? []
    )
  }

  /// Create a sharable voucher.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVoucher.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createVoucher(
    _ request: Server_CreateVoucherRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_CreateVoucherRequest, Server_CreateVoucherResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.createVoucher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateVoucherInterceptors() ?? []
    )
  }

  /// Get Voucher referral-status.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetReferralStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getReferralStatus(
    _ request: Server_GetReferralStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_GetReferralStatusRequest, Server_GetReferralStatusResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getReferralStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReferralStatusInterceptors() ?? []
    )
  }

  /// Cancel a upcoming service.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelService(
    _ request: Server_CancelServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_CancelServiceRequest, Server_CancelServiceResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.cancelService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelServiceInterceptors() ?? []
    )
  }

  /// Log a remote event.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoteLog.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func remoteLog(
    _ request: Server_RemoteLogRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_RemoteLogRequest, Server_RemoteLogResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.remoteLog.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoteLogInterceptors() ?? []
    )
  }

  /// Force a timeout.
  ///
  /// - Parameters:
  ///   - request: Request to send to Timeout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func timeout(
    _ request: Server_TimeoutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_TimeoutRequest, Server_TimeoutResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.timeout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutInterceptors() ?? []
    )
  }

  /// List active transactions (booked haircuts and products to pickup).
  ///
  /// - Parameters:
  ///   - request: Request to send to ListActiveTransactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listActiveTransactions(
    _ request: Server_ListActiveTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_ListActiveTransactionsRequest, Server_ListActiveTransactionsResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listActiveTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListActiveTransactionsInterceptors() ?? []
    )
  }

  /// List historical transactions (performed haircuts and picked up products).
  ///
  /// - Parameters:
  ///   - request: Request to send to ListHistoricalTransactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listHistoricalTransactions(
    _ request: Server_ListHistoricalTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_ListHistoricalTransactionsRequest, Server_ListHistoricalTransactionsResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listHistoricalTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHistoricalTransactionsInterceptors() ?? []
    )
  }

  /// Get all punched-in hairdressers for a given salon.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAvailableHairdressers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAvailableHairdressers(
    _ request: Server_AvailableHairdressersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Server_AvailableHairdressersRequest, Server_AvailableHairdressersResponse> {
    return self.makeUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getAvailableHairdressers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAvailableHairdressersInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Server_CuttersAPIClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Server_CuttersAPINIOClient")
public final class Server_CuttersAPIClient: Server_CuttersAPIClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the server.CuttersAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Server_CuttersAPINIOClient: Server_CuttersAPIClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the server.CuttersAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// API for getting status about salons, or making bookings.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Server_CuttersAPIAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol? { get }

  func makeGetWaitingTimesCall(
    _ request: Server_GetWaitingTimesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Server_GetWaitingTimesRequest, Server_GetWaitingTimesResponse>

  func makeGetSalonCall(
    _ request: Server_GetSalonRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_GetSalonRequest, Server_GetSalonResponse>

  func makeBookCall(
    _ request: Server_BookRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_BookRequest, Server_BookResponse>

  func makePurchaseCall(
    _ request: Server_PurchaseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_PurchaseRequest, Server_PurchaseResponse>

  func makeGetAvailablePaymentProvidersCall(
    _ request: Server_GetAvailablePaymentProvidersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_GetAvailablePaymentProvidersRequest, Server_GetAvailablePaymentProvidersResponse>

  func makeGetPriceCall(
    _ request: Server_GetPriceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_GetPriceRequest, Server_GetPriceResponse>

  func makeGetCampaignsCall(
    _ request: Server_GetCampaignsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_GetCampaignsRequest, Server_GetCampaignsResponse>

  func makeGetServicesCall(
    _ request: Server_GetServicesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Server_GetServicesRequest, Server_GetServicesResponse>

  func makeGetProductsCall(
    _ request: Server_GetProductsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Server_GetProductsRequest, Server_GetProductsResponse>

  func makeGetWaitingStatusCall(
    _ request: Server_GetWaitingStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_GetWaitingStatusRequest, Server_GetWaitingStatusResponse>

  func makeListTransactionsCall(
    _ request: Server_ListTransactionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_ListTransactionsRequest, Server_ListTransactionsResponse>

  func makeCanRedeemVoucherCall(
    _ request: Server_CanRedeemVoucherRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_CanRedeemVoucherRequest, Server_CanRedeemVoucherResponse>

  func makeCreateVoucherCall(
    _ request: Server_CreateVoucherRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_CreateVoucherRequest, Server_CreateVoucherResponse>

  func makeGetReferralStatusCall(
    _ request: Server_GetReferralStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_GetReferralStatusRequest, Server_GetReferralStatusResponse>

  func makeCancelServiceCall(
    _ request: Server_CancelServiceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_CancelServiceRequest, Server_CancelServiceResponse>

  func makeRemoteLogCall(
    _ request: Server_RemoteLogRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_RemoteLogRequest, Server_RemoteLogResponse>

  func makeTimeoutCall(
    _ request: Server_TimeoutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_TimeoutRequest, Server_TimeoutResponse>

  func makeListActiveTransactionsCall(
    _ request: Server_ListActiveTransactionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_ListActiveTransactionsRequest, Server_ListActiveTransactionsResponse>

  func makeListHistoricalTransactionsCall(
    _ request: Server_ListHistoricalTransactionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_ListHistoricalTransactionsRequest, Server_ListHistoricalTransactionsResponse>

  func makeGetAvailableHairdressersCall(
    _ request: Server_AvailableHairdressersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Server_AvailableHairdressersRequest, Server_AvailableHairdressersResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Server_CuttersAPIAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Server_CuttersAPIClientMetadata.serviceDescriptor
  }

  public var interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetWaitingTimesCall(
    _ request: Server_GetWaitingTimesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Server_GetWaitingTimesRequest, Server_GetWaitingTimesResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getWaitingTimes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaitingTimesInterceptors() ?? []
    )
  }

  public func makeGetSalonCall(
    _ request: Server_GetSalonRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_GetSalonRequest, Server_GetSalonResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getSalon.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSalonInterceptors() ?? []
    )
  }

  public func makeBookCall(
    _ request: Server_BookRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_BookRequest, Server_BookResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.book.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBookInterceptors() ?? []
    )
  }

  public func makePurchaseCall(
    _ request: Server_PurchaseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_PurchaseRequest, Server_PurchaseResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.purchase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurchaseInterceptors() ?? []
    )
  }

  public func makeGetAvailablePaymentProvidersCall(
    _ request: Server_GetAvailablePaymentProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_GetAvailablePaymentProvidersRequest, Server_GetAvailablePaymentProvidersResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getAvailablePaymentProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAvailablePaymentProvidersInterceptors() ?? []
    )
  }

  public func makeGetPriceCall(
    _ request: Server_GetPriceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_GetPriceRequest, Server_GetPriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPriceInterceptors() ?? []
    )
  }

  public func makeGetCampaignsCall(
    _ request: Server_GetCampaignsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_GetCampaignsRequest, Server_GetCampaignsResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getCampaigns.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCampaignsInterceptors() ?? []
    )
  }

  public func makeGetServicesCall(
    _ request: Server_GetServicesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Server_GetServicesRequest, Server_GetServicesResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getServices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServicesInterceptors() ?? []
    )
  }

  public func makeGetProductsCall(
    _ request: Server_GetProductsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Server_GetProductsRequest, Server_GetProductsResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getProducts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProductsInterceptors() ?? []
    )
  }

  public func makeGetWaitingStatusCall(
    _ request: Server_GetWaitingStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_GetWaitingStatusRequest, Server_GetWaitingStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getWaitingStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaitingStatusInterceptors() ?? []
    )
  }

  public func makeListTransactionsCall(
    _ request: Server_ListTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_ListTransactionsRequest, Server_ListTransactionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? []
    )
  }

  public func makeCanRedeemVoucherCall(
    _ request: Server_CanRedeemVoucherRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_CanRedeemVoucherRequest, Server_CanRedeemVoucherResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.canRedeemVoucher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanRedeemVoucherInterceptors() ?? []
    )
  }

  public func makeCreateVoucherCall(
    _ request: Server_CreateVoucherRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_CreateVoucherRequest, Server_CreateVoucherResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.createVoucher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateVoucherInterceptors() ?? []
    )
  }

  public func makeGetReferralStatusCall(
    _ request: Server_GetReferralStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_GetReferralStatusRequest, Server_GetReferralStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getReferralStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReferralStatusInterceptors() ?? []
    )
  }

  public func makeCancelServiceCall(
    _ request: Server_CancelServiceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_CancelServiceRequest, Server_CancelServiceResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.cancelService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelServiceInterceptors() ?? []
    )
  }

  public func makeRemoteLogCall(
    _ request: Server_RemoteLogRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_RemoteLogRequest, Server_RemoteLogResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.remoteLog.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoteLogInterceptors() ?? []
    )
  }

  public func makeTimeoutCall(
    _ request: Server_TimeoutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_TimeoutRequest, Server_TimeoutResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.timeout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutInterceptors() ?? []
    )
  }

  public func makeListActiveTransactionsCall(
    _ request: Server_ListActiveTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_ListActiveTransactionsRequest, Server_ListActiveTransactionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listActiveTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListActiveTransactionsInterceptors() ?? []
    )
  }

  public func makeListHistoricalTransactionsCall(
    _ request: Server_ListHistoricalTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_ListHistoricalTransactionsRequest, Server_ListHistoricalTransactionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listHistoricalTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHistoricalTransactionsInterceptors() ?? []
    )
  }

  public func makeGetAvailableHairdressersCall(
    _ request: Server_AvailableHairdressersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Server_AvailableHairdressersRequest, Server_AvailableHairdressersResponse> {
    return self.makeAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getAvailableHairdressers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAvailableHairdressersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Server_CuttersAPIAsyncClientProtocol {
  public func getWaitingTimes(
    _ request: Server_GetWaitingTimesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Server_GetWaitingTimesResponse> {
    return self.performAsyncServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getWaitingTimes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaitingTimesInterceptors() ?? []
    )
  }

  public func getSalon(
    _ request: Server_GetSalonRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_GetSalonResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getSalon.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSalonInterceptors() ?? []
    )
  }

  public func book(
    _ request: Server_BookRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_BookResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.book.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBookInterceptors() ?? []
    )
  }

  public func purchase(
    _ request: Server_PurchaseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_PurchaseResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.purchase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurchaseInterceptors() ?? []
    )
  }

  public func getAvailablePaymentProviders(
    _ request: Server_GetAvailablePaymentProvidersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_GetAvailablePaymentProvidersResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getAvailablePaymentProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAvailablePaymentProvidersInterceptors() ?? []
    )
  }

  public func getPrice(
    _ request: Server_GetPriceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_GetPriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPriceInterceptors() ?? []
    )
  }

  public func getCampaigns(
    _ request: Server_GetCampaignsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_GetCampaignsResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getCampaigns.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCampaignsInterceptors() ?? []
    )
  }

  public func getServices(
    _ request: Server_GetServicesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Server_GetServicesResponse> {
    return self.performAsyncServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getServices.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServicesInterceptors() ?? []
    )
  }

  public func getProducts(
    _ request: Server_GetProductsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Server_GetProductsResponse> {
    return self.performAsyncServerStreamingCall(
      path: Server_CuttersAPIClientMetadata.Methods.getProducts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProductsInterceptors() ?? []
    )
  }

  public func getWaitingStatus(
    _ request: Server_GetWaitingStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_GetWaitingStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getWaitingStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWaitingStatusInterceptors() ?? []
    )
  }

  public func listTransactions(
    _ request: Server_ListTransactionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_ListTransactionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListTransactionsInterceptors() ?? []
    )
  }

  public func canRedeemVoucher(
    _ request: Server_CanRedeemVoucherRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_CanRedeemVoucherResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.canRedeemVoucher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCanRedeemVoucherInterceptors() ?? []
    )
  }

  public func createVoucher(
    _ request: Server_CreateVoucherRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_CreateVoucherResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.createVoucher.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateVoucherInterceptors() ?? []
    )
  }

  public func getReferralStatus(
    _ request: Server_GetReferralStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_GetReferralStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getReferralStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetReferralStatusInterceptors() ?? []
    )
  }

  public func cancelService(
    _ request: Server_CancelServiceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_CancelServiceResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.cancelService.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelServiceInterceptors() ?? []
    )
  }

  public func remoteLog(
    _ request: Server_RemoteLogRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_RemoteLogResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.remoteLog.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoteLogInterceptors() ?? []
    )
  }

  public func timeout(
    _ request: Server_TimeoutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_TimeoutResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.timeout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutInterceptors() ?? []
    )
  }

  public func listActiveTransactions(
    _ request: Server_ListActiveTransactionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_ListActiveTransactionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listActiveTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListActiveTransactionsInterceptors() ?? []
    )
  }

  public func listHistoricalTransactions(
    _ request: Server_ListHistoricalTransactionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_ListHistoricalTransactionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.listHistoricalTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListHistoricalTransactionsInterceptors() ?? []
    )
  }

  public func getAvailableHairdressers(
    _ request: Server_AvailableHairdressersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Server_AvailableHairdressersResponse {
    return try await self.performAsyncUnaryCall(
      path: Server_CuttersAPIClientMetadata.Methods.getAvailableHairdressers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAvailableHairdressersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Server_CuttersAPIAsyncClient: Server_CuttersAPIAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Server_CuttersAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Server_CuttersAPIClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getWaitingTimes'.
  func makeGetWaitingTimesInterceptors() -> [ClientInterceptor<Server_GetWaitingTimesRequest, Server_GetWaitingTimesResponse>]

  /// - Returns: Interceptors to use when invoking 'getSalon'.
  func makeGetSalonInterceptors() -> [ClientInterceptor<Server_GetSalonRequest, Server_GetSalonResponse>]

  /// - Returns: Interceptors to use when invoking 'book'.
  func makeBookInterceptors() -> [ClientInterceptor<Server_BookRequest, Server_BookResponse>]

  /// - Returns: Interceptors to use when invoking 'purchase'.
  func makePurchaseInterceptors() -> [ClientInterceptor<Server_PurchaseRequest, Server_PurchaseResponse>]

  /// - Returns: Interceptors to use when invoking 'getAvailablePaymentProviders'.
  func makeGetAvailablePaymentProvidersInterceptors() -> [ClientInterceptor<Server_GetAvailablePaymentProvidersRequest, Server_GetAvailablePaymentProvidersResponse>]

  /// - Returns: Interceptors to use when invoking 'getPrice'.
  func makeGetPriceInterceptors() -> [ClientInterceptor<Server_GetPriceRequest, Server_GetPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'getCampaigns'.
  func makeGetCampaignsInterceptors() -> [ClientInterceptor<Server_GetCampaignsRequest, Server_GetCampaignsResponse>]

  /// - Returns: Interceptors to use when invoking 'getServices'.
  func makeGetServicesInterceptors() -> [ClientInterceptor<Server_GetServicesRequest, Server_GetServicesResponse>]

  /// - Returns: Interceptors to use when invoking 'getProducts'.
  func makeGetProductsInterceptors() -> [ClientInterceptor<Server_GetProductsRequest, Server_GetProductsResponse>]

  /// - Returns: Interceptors to use when invoking 'getWaitingStatus'.
  func makeGetWaitingStatusInterceptors() -> [ClientInterceptor<Server_GetWaitingStatusRequest, Server_GetWaitingStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'listTransactions'.
  func makeListTransactionsInterceptors() -> [ClientInterceptor<Server_ListTransactionsRequest, Server_ListTransactionsResponse>]

  /// - Returns: Interceptors to use when invoking 'canRedeemVoucher'.
  func makeCanRedeemVoucherInterceptors() -> [ClientInterceptor<Server_CanRedeemVoucherRequest, Server_CanRedeemVoucherResponse>]

  /// - Returns: Interceptors to use when invoking 'createVoucher'.
  func makeCreateVoucherInterceptors() -> [ClientInterceptor<Server_CreateVoucherRequest, Server_CreateVoucherResponse>]

  /// - Returns: Interceptors to use when invoking 'getReferralStatus'.
  func makeGetReferralStatusInterceptors() -> [ClientInterceptor<Server_GetReferralStatusRequest, Server_GetReferralStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelService'.
  func makeCancelServiceInterceptors() -> [ClientInterceptor<Server_CancelServiceRequest, Server_CancelServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'remoteLog'.
  func makeRemoteLogInterceptors() -> [ClientInterceptor<Server_RemoteLogRequest, Server_RemoteLogResponse>]

  /// - Returns: Interceptors to use when invoking 'timeout'.
  func makeTimeoutInterceptors() -> [ClientInterceptor<Server_TimeoutRequest, Server_TimeoutResponse>]

  /// - Returns: Interceptors to use when invoking 'listActiveTransactions'.
  func makeListActiveTransactionsInterceptors() -> [ClientInterceptor<Server_ListActiveTransactionsRequest, Server_ListActiveTransactionsResponse>]

  /// - Returns: Interceptors to use when invoking 'listHistoricalTransactions'.
  func makeListHistoricalTransactionsInterceptors() -> [ClientInterceptor<Server_ListHistoricalTransactionsRequest, Server_ListHistoricalTransactionsResponse>]

  /// - Returns: Interceptors to use when invoking 'getAvailableHairdressers'.
  func makeGetAvailableHairdressersInterceptors() -> [ClientInterceptor<Server_AvailableHairdressersRequest, Server_AvailableHairdressersResponse>]
}

public enum Server_CuttersAPIClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CuttersAPI",
    fullName: "server.CuttersAPI",
    methods: [
      Server_CuttersAPIClientMetadata.Methods.getWaitingTimes,
      Server_CuttersAPIClientMetadata.Methods.getSalon,
      Server_CuttersAPIClientMetadata.Methods.book,
      Server_CuttersAPIClientMetadata.Methods.purchase,
      Server_CuttersAPIClientMetadata.Methods.getAvailablePaymentProviders,
      Server_CuttersAPIClientMetadata.Methods.getPrice,
      Server_CuttersAPIClientMetadata.Methods.getCampaigns,
      Server_CuttersAPIClientMetadata.Methods.getServices,
      Server_CuttersAPIClientMetadata.Methods.getProducts,
      Server_CuttersAPIClientMetadata.Methods.getWaitingStatus,
      Server_CuttersAPIClientMetadata.Methods.listTransactions,
      Server_CuttersAPIClientMetadata.Methods.canRedeemVoucher,
      Server_CuttersAPIClientMetadata.Methods.createVoucher,
      Server_CuttersAPIClientMetadata.Methods.getReferralStatus,
      Server_CuttersAPIClientMetadata.Methods.cancelService,
      Server_CuttersAPIClientMetadata.Methods.remoteLog,
      Server_CuttersAPIClientMetadata.Methods.timeout,
      Server_CuttersAPIClientMetadata.Methods.listActiveTransactions,
      Server_CuttersAPIClientMetadata.Methods.listHistoricalTransactions,
      Server_CuttersAPIClientMetadata.Methods.getAvailableHairdressers,
    ]
  )

  public enum Methods {
    public static let getWaitingTimes = GRPCMethodDescriptor(
      name: "GetWaitingTimes",
      path: "/server.CuttersAPI/GetWaitingTimes",
      type: GRPCCallType.serverStreaming
    )

    public static let getSalon = GRPCMethodDescriptor(
      name: "GetSalon",
      path: "/server.CuttersAPI/GetSalon",
      type: GRPCCallType.unary
    )

    public static let book = GRPCMethodDescriptor(
      name: "Book",
      path: "/server.CuttersAPI/Book",
      type: GRPCCallType.unary
    )

    public static let purchase = GRPCMethodDescriptor(
      name: "Purchase",
      path: "/server.CuttersAPI/Purchase",
      type: GRPCCallType.unary
    )

    public static let getAvailablePaymentProviders = GRPCMethodDescriptor(
      name: "GetAvailablePaymentProviders",
      path: "/server.CuttersAPI/GetAvailablePaymentProviders",
      type: GRPCCallType.unary
    )

    public static let getPrice = GRPCMethodDescriptor(
      name: "GetPrice",
      path: "/server.CuttersAPI/GetPrice",
      type: GRPCCallType.unary
    )

    public static let getCampaigns = GRPCMethodDescriptor(
      name: "GetCampaigns",
      path: "/server.CuttersAPI/GetCampaigns",
      type: GRPCCallType.unary
    )

    public static let getServices = GRPCMethodDescriptor(
      name: "GetServices",
      path: "/server.CuttersAPI/GetServices",
      type: GRPCCallType.serverStreaming
    )

    public static let getProducts = GRPCMethodDescriptor(
      name: "GetProducts",
      path: "/server.CuttersAPI/GetProducts",
      type: GRPCCallType.serverStreaming
    )

    public static let getWaitingStatus = GRPCMethodDescriptor(
      name: "GetWaitingStatus",
      path: "/server.CuttersAPI/GetWaitingStatus",
      type: GRPCCallType.unary
    )

    public static let listTransactions = GRPCMethodDescriptor(
      name: "ListTransactions",
      path: "/server.CuttersAPI/ListTransactions",
      type: GRPCCallType.unary
    )

    public static let canRedeemVoucher = GRPCMethodDescriptor(
      name: "CanRedeemVoucher",
      path: "/server.CuttersAPI/CanRedeemVoucher",
      type: GRPCCallType.unary
    )

    public static let createVoucher = GRPCMethodDescriptor(
      name: "CreateVoucher",
      path: "/server.CuttersAPI/CreateVoucher",
      type: GRPCCallType.unary
    )

    public static let getReferralStatus = GRPCMethodDescriptor(
      name: "GetReferralStatus",
      path: "/server.CuttersAPI/GetReferralStatus",
      type: GRPCCallType.unary
    )

    public static let cancelService = GRPCMethodDescriptor(
      name: "CancelService",
      path: "/server.CuttersAPI/CancelService",
      type: GRPCCallType.unary
    )

    public static let remoteLog = GRPCMethodDescriptor(
      name: "RemoteLog",
      path: "/server.CuttersAPI/RemoteLog",
      type: GRPCCallType.unary
    )

    public static let timeout = GRPCMethodDescriptor(
      name: "Timeout",
      path: "/server.CuttersAPI/Timeout",
      type: GRPCCallType.unary
    )

    public static let listActiveTransactions = GRPCMethodDescriptor(
      name: "ListActiveTransactions",
      path: "/server.CuttersAPI/ListActiveTransactions",
      type: GRPCCallType.unary
    )

    public static let listHistoricalTransactions = GRPCMethodDescriptor(
      name: "ListHistoricalTransactions",
      path: "/server.CuttersAPI/ListHistoricalTransactions",
      type: GRPCCallType.unary
    )

    public static let getAvailableHairdressers = GRPCMethodDescriptor(
      name: "GetAvailableHairdressers",
      path: "/server.CuttersAPI/GetAvailableHairdressers",
      type: GRPCCallType.unary
    )
  }
}

